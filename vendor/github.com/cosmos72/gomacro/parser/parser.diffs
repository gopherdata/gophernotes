--- go1.10.1/src/go/parser/parser.go	2018-03-29 06:29:01.000000000 +0200
+++ parser.go	2018-04-09 21:20:52.453627706 +0200
@@ -19,16 +19,18 @@
 import (
 	"fmt"
 	"go/ast"
-	"go/scanner"
 	"go/token"
 	"strconv"
 	"strings"
 	"unicode"
+
+	"github.com/cosmos72/gomacro/scanner"
+	mt "github.com/cosmos72/gomacro/token"
 )
 
 // The parser structure holds the parser's internal state.
 type parser struct {
-	file    *token.File
+	file    *mt.File
 	errors  scanner.ErrorList
 	scanner scanner.Scanner
 
@@ -42,6 +44,9 @@
 	leadComment *ast.CommentGroup // last lead comment
 	lineComment *ast.CommentGroup // last line comment
 
+	tok0        token.Token // patch: Previous token
+	specialChar rune        // patch: prefix for quote operators ' ` , ,@
+
 	// Next token
 	pos token.Pos   // token position
 	tok token.Token // one token look-ahead
@@ -70,17 +75,51 @@
 	targetStack [][]*ast.Ident // stack of unresolved labels
 }
 
-func (p *parser) init(fset *token.FileSet, filename string, src []byte, mode Mode) {
-	p.file = fset.AddFile(filename, -1, len(src))
+func (p *parser) init(fset *mt.FileSet, filename string, lineOffset int, src []byte, mode Mode) {
+	// Explicitly initialize all private fields since a parser may be reused.
+	if fset == nil {
+		fset = mt.NewFileSet()
+	}
+	p.file = fset.AddFile(filename, -1, len(src), lineOffset)
+	p.errors = nil
+
 	var m scanner.Mode
 	if mode&ParseComments != 0 {
 		m = scanner.ScanComments
 	}
+	if p.specialChar == '\x00' {
+		p.specialChar = '~'
+	}
 	eh := func(pos token.Position, msg string) { p.errors.Add(pos, msg) }
-	p.scanner.Init(p.file, src, eh, m)
+	p.scanner.Init(p.file, src, eh, m, p.specialChar)
 
 	p.mode = mode
 	p.trace = mode&Trace != 0 // for convenience (p.trace is used frequently)
+	p.indent = 0
+
+	p.comments = nil
+	p.leadComment = nil
+	p.lineComment = nil
+
+	p.pos = token.NoPos
+	p.tok = token.ILLEGAL
+	p.lit = ""
+
+	p.syncPos = token.NoPos
+	p.syncCnt = 0
+
+	p.exprLev = 0
+	p.inRhs = false
+
+	p.topScope = nil
+	p.openScope()
+	p.pkgScope = p.topScope
+
+	p.unresolved = nil
+	p.imports = nil
+
+	p.labelScope = nil
+	p.targetStack = nil
 
 	p.next()
 }
@@ -243,11 +282,13 @@
 	// very first token (!p.pos.IsValid()) is not initialized
 	// (it is token.ILLEGAL), so don't print it .
 	if p.trace && p.pos.IsValid() {
-		s := p.tok.String()
+		s := mt.String(p.tok) // patch: support macro-related keywords
 		switch {
 		case p.tok.IsLiteral():
 			p.printTrace(s, p.lit)
-		case p.tok.IsOperator(), p.tok.IsKeyword():
+		case p.tok.IsOperator(), p.tok.IsKeyword(),
+			mt.IsMacroKeyword(p.tok): // patch: support macro-related keywords
+
 			p.printTrace("\"" + s + "\"")
 		default:
 			p.printTrace(s)
@@ -317,6 +358,7 @@
 	p.leadComment = nil
 	p.lineComment = nil
 	prev := p.pos
+	p.tok0 = p.tok
 	p.next0()
 
 	if p.tok == token.COMMENT {
@@ -378,7 +420,7 @@
 		if p.tok == token.SEMICOLON && p.lit == "\n" {
 			msg += ", found newline"
 		} else {
-			msg += ", found '" + p.tok.String() + "'"
+			msg += ", found '" + mt.String(p.tok) + "'"
 			if p.tok.IsLiteral() {
 				msg += " " + p.lit
 			}
@@ -390,7 +432,7 @@
 func (p *parser) expect(tok token.Token) token.Pos {
 	pos := p.pos
 	if p.tok != tok {
-		p.errorExpected(pos, "'"+tok.String()+"'")
+		p.errorExpected(pos, "'"+mt.String(tok)+"'")
 	}
 	p.next() // make progress
 	return pos
@@ -409,7 +451,7 @@
 
 func (p *parser) expectSemi() {
 	// semicolon is optional before a closing ')' or '}'
-	if p.tok != token.RPAREN && p.tok != token.RBRACE {
+	if p.tok != token.RPAREN && p.tok != token.RBRACE && p.tok != token.RBRACK { // patch: semicolon is optional also before a closing ']'
 		switch p.tok {
 		case token.COMMA:
 			// permit a ',' instead of a ';' but complain
@@ -454,7 +496,7 @@
 		case token.BREAK, token.CONST, token.CONTINUE, token.DEFER,
 			token.FALLTHROUGH, token.FOR, token.GO, token.GOTO,
 			token.IF, token.RETURN, token.SELECT, token.SWITCH,
-			token.TYPE, token.VAR:
+			token.TYPE, token.VAR, mt.FUNCTION:
 			// Return only if parser made some progress since last
 			// sync or if it has not reached 10 sync calls without
 			// progress. Otherwise consume at least one token to
@@ -489,7 +531,7 @@
 func syncDecl(p *parser) {
 	for {
 		switch p.tok {
-		case token.CONST, token.TYPE, token.VAR:
+		case token.CONST, token.TYPE, token.VAR, token.FUNC, mt.FUNCTION:
 			// see comments in syncStmt
 			if p.pos == p.syncPos && p.syncCnt < 10 {
 				p.syncCnt++
@@ -912,12 +954,12 @@
 	return
 }
 
-func (p *parser) parseFuncType() (*ast.FuncType, *ast.Scope) {
+func (p *parser) parseFuncType(tok token.Token) (*ast.FuncType, *ast.Scope) {
 	if p.trace {
 		defer un(trace(p, "FuncType"))
 	}
 
-	pos := p.expect(token.FUNC)
+	pos := p.expect(tok)
 	scope := ast.NewScope(p.topScope) // function scope
 	params, results := p.parseSignature(scope)
 
@@ -1026,8 +1068,8 @@
 		return p.parseStructType()
 	case token.MUL:
 		return p.parsePointerType()
-	case token.FUNC:
-		typ, _ := p.parseFuncType()
+	case token.FUNC, mt.LAMBDA:
+		typ, _ := p.parseFuncType(p.tok)
 		return typ
 	case token.INTERFACE:
 		return p.parseInterfaceType()
@@ -1041,6 +1083,8 @@
 		typ := p.parseType()
 		rparen := p.expect(token.RPAREN)
 		return &ast.ParenExpr{Lparen: lparen, X: typ, Rparen: rparen}
+	case mt.QUOTE, mt.QUASIQUOTE, mt.UNQUOTE: // patch: support quote and friends inside types
+		return p.parseQuote()
 	}
 
 	// no type found
@@ -1063,7 +1107,7 @@
 		defer un(trace(p, "StatementList"))
 	}
 
-	for p.tok != token.CASE && p.tok != token.DEFAULT && p.tok != token.RBRACE && p.tok != token.EOF {
+	for p.tok != mt.TYPECASE && p.tok != token.CASE && p.tok != token.DEFAULT && p.tok != token.RBRACE && p.tok != token.EOF {
 		list = append(list, p.parseStmt())
 	}
 
@@ -1103,12 +1147,12 @@
 // ----------------------------------------------------------------------------
 // Expressions
 
-func (p *parser) parseFuncTypeOrLit() ast.Expr {
+func (p *parser) parseFuncTypeOrLit(tok token.Token) ast.Expr {
 	if p.trace {
 		defer un(trace(p, "FuncTypeOrLit"))
 	}
 
-	typ, scope := p.parseFuncType()
+	typ, scope := p.parseFuncType(tok)
 	if p.tok != token.LBRACE {
 		// function type only
 		return typ
@@ -1152,8 +1196,20 @@
 		rparen := p.expect(token.RPAREN)
 		return &ast.ParenExpr{Lparen: lparen, X: x, Rparen: rparen}
 
-	case token.FUNC:
-		return p.parseFuncTypeOrLit()
+	case token.FUNC, mt.LAMBDA:
+		// patch: lambda. equivalent to func, useful to resolve ambiguities between closures
+		// and function/method declarations
+		return p.parseFuncTypeOrLit(p.tok)
+
+	// patch: quote and friends
+	// TODO: accept ms.MACRO here and interpret as local macro definition? (i.e. Common Lisp macrolet)
+	case mt.QUOTE, mt.QUASIQUOTE, mt.UNQUOTE, mt.UNQUOTE_SPLICE:
+		return p.parseQuote()
+
+	// patch: accept block statements inside expressions. allows to nest macro calls,
+	// to write { if a { b } else { c } } inside an expression, and many other things
+	case token.LBRACE:
+		return p.parseExprBlock()
 	}
 
 	if typ := p.tryIdentOrType(); typ != nil {
@@ -1432,10 +1488,13 @@
 
 // If x is of the form (T), unparen returns unparen(T), otherwise it returns x.
 func unparen(x ast.Expr) ast.Expr {
-	if p, isParen := x.(*ast.ParenExpr); isParen {
-		x = unparen(p.X)
+	for {
+		if p, ok := x.(*ast.ParenExpr); ok {
+			x = p.X
+			continue
+		}
+		return x
 	}
-	return x
 }
 
 // checkExprOrType checks that x is an expression or a type
@@ -1701,6 +1760,10 @@
 			// Go spec: The scope of a label is the body of the function
 			// in which it is declared and excludes the body of any nested
 			// function.
+			if p.labelScope == nil {
+				p.error(label.Pos(), fmt.Sprintf("syntax error: label outside block: %s", label.Name))
+				return p.parseStmt(), false
+			}
 			stmt := &ast.LabeledStmt{Label: label, Colon: colon, Stmt: p.parseStmt()}
 			p.declare(stmt, nil, p.labelScope, ast.Lbl, label)
 			return stmt, false
@@ -1884,25 +1947,37 @@
 	return
 }
 
-func (p *parser) parseCaseClause(typeSwitch bool) *ast.CaseClause {
+func (p *parser) parseCaseClause(typeSwitch bool) ast.Stmt {
 	if p.trace {
 		defer un(trace(p, "CaseClause"))
 	}
 
 	pos := p.pos
 	var list []ast.Expr
-	if p.tok == token.CASE {
+	if p.tok == mt.TYPECASE {
+		p.next()
+		list = p.parseTypeList()
+	} else if p.tok == token.CASE {
 		p.next()
 		if typeSwitch {
 			list = p.parseTypeList()
 		} else {
 			list = p.parseRhsList()
 		}
-	} else {
+	} else if p.tok == token.DEFAULT {
 		p.expect(token.DEFAULT)
+	} else {
+		switch p.tok {
+		case token.ILLEGAL, token.EOF, token.COLON, token.SEMICOLON, token.RBRACE, token.RBRACK, token.LPAREN:
+			p.errorExpected(p.pos, "'case' or 'default'")
+		default:
+			// patch: support switch foo { ~,{bar} }
+			// where bar will expand to case x, y, z: w
+			return p.parseStmt()
+		}
 	}
-
 	colon := p.expect(token.COLON)
+
 	p.openScope()
 	body := p.parseStmtList()
 	p.closeScope()
@@ -1980,7 +2055,8 @@
 	typeSwitch := p.isTypeSwitchGuard(s2)
 	lbrace := p.expect(token.LBRACE)
 	var list []ast.Stmt
-	for p.tok == token.CASE || p.tok == token.DEFAULT {
+	// patch: allow ~quote and friends in addition to case: and default:
+	for p.tok0 != token.EOF && p.tok != token.LPAREN && p.tok != token.RBRACK && p.tok != token.RBRACE {
 		list = append(list, p.parseCaseClause(typeSwitch))
 	}
 	rbrace := p.expect(token.RBRACE)
@@ -2159,13 +2235,17 @@
 	}
 
 	switch p.tok {
-	case token.CONST, token.TYPE, token.VAR:
+	case token.CONST, token.TYPE, token.VAR,
+		mt.FUNCTION: // patch: allow function/method declarations inside statements. extremely useful for ~quote and ~quasiquote
 		s = &ast.DeclStmt{Decl: p.parseDecl(syncStmt)}
 	case
 		// tokens that may start an expression
 		token.IDENT, token.INT, token.FLOAT, token.IMAG, token.CHAR, token.STRING, token.FUNC, token.LPAREN, // operands
 		token.LBRACK, token.STRUCT, token.MAP, token.CHAN, token.INTERFACE, // composite types
-		token.ADD, token.SUB, token.MUL, token.AND, token.XOR, token.ARROW, token.NOT: // unary operators
+		token.ADD, token.SUB, token.MUL, token.AND, token.XOR, token.ARROW, token.NOT, // unary operators
+		mt.MACRO, mt.SPLICE, mt.QUOTE, mt.QUASIQUOTE, mt.UNQUOTE, mt.UNQUOTE_SPLICE, // patch: macro, quote and friends
+		mt.LAMBDA:
+
 		s, _ = p.parseSimpleStmt(labelOk)
 		// because of the required look-ahead, labeled statements are
 		// parsed by parseSimpleStmt - don't expect a semicolon after
@@ -2173,6 +2253,8 @@
 		if _, isLabeledStmt := s.(*ast.LabeledStmt); !isLabeledStmt {
 			p.expectSemi()
 		}
+	case token.IMPORT: // patch: allow imports inside statements. useful for ~quote and ~quasiquote
+		s = &ast.DeclStmt{Decl: p.parseGenDecl(token.IMPORT, p.parseImportSpec)}
 	case token.GO:
 		s = p.parseGoStmt()
 	case token.DEFER:
@@ -2327,11 +2409,12 @@
 	// (Global identifiers are resolved in a separate phase after parsing.)
 	spec := &ast.TypeSpec{Doc: doc, Name: ident}
 	p.declare(spec, nil, p.topScope, ast.Typ, ident)
+
 	if p.tok == token.ASSIGN {
 		spec.Assign = p.pos
 		p.next()
 	}
-	spec.Type = p.parseType()
+ 	spec.Type = p.parseType()
 	p.expectSemi() // call before accessing p.linecomment
 	spec.Comment = p.lineComment
 
@@ -2369,17 +2452,41 @@
 	}
 }
 
-func (p *parser) parseFuncDecl() *ast.FuncDecl {
+func (p *parser) parseFuncDecl(tok token.Token) *ast.FuncDecl {
 	if p.trace {
 		defer un(trace(p, "FunctionDecl"))
 	}
+	decl := p.parseFuncOrMacroDecl(tok)
+
+	// paranoia: empty receiver list is omitted. this should not happen,
+	// but we use it to distinguish functions from macros, so better safe than sorry.
+	recv := decl.Recv
+	if recv != nil && len(recv.List) == 0 {
+		decl.Recv = nil
+	}
+	return decl
+}
+
+// patch: parse a macro declaration
+func (p *parser) parseMacroDecl() *ast.FuncDecl {
+	if p.trace {
+		defer un(trace(p, "MacroDecl"))
+	}
+	decl := p.parseFuncOrMacroDecl(mt.MACRO)
+	// add zero-length receiver list, to mark decl as a macro
+	decl.Recv = &ast.FieldList{List: []*ast.Field{}}
+	return decl
+}
+
+func (p *parser) parseFuncOrMacroDecl(tok token.Token) *ast.FuncDecl {
 
 	doc := p.leadComment
-	pos := p.expect(token.FUNC)
+	pos := p.expect(tok)
 	scope := ast.NewScope(p.topScope) // function scope
 
 	var recv *ast.FieldList
-	if p.tok == token.LPAREN {
+	// patch: macros cannot have a receiver
+	if tok != mt.MACRO && p.tok == token.LPAREN {
 		recv = p.parseParameters(scope, false)
 	}
 
@@ -2432,8 +2539,11 @@
 	case token.TYPE:
 		f = p.parseTypeSpec
 
-	case token.FUNC:
-		return p.parseFuncDecl()
+	case token.FUNC, mt.FUNCTION:
+		return p.parseFuncDecl(p.tok)
+
+	case mt.MACRO: // patch: parse a macro declaration
+		return p.parseMacroDecl()
 
 	default:
 		pos := p.pos
@@ -2476,8 +2586,11 @@
 		return nil
 	}
 
-	p.openScope()
-	p.pkgScope = p.topScope
+	topScope := p.topScope
+	labelScope := p.labelScope
+	if topScope == nil {
+		p.openScope()
+	}
 	var decls []ast.Decl
 	if p.mode&PackageClauseOnly == 0 {
 		// import decls
@@ -2492,9 +2605,11 @@
 			}
 		}
 	}
-	p.closeScope()
-	assert(p.topScope == nil, "unbalanced scopes")
-	assert(p.labelScope == nil, "unbalanced label scopes")
+	if topScope == nil {
+		p.closeScope()
+	}
+	assert(p.topScope == topScope, "unbalanced scopes")
+	assert(p.labelScope == labelScope, "unbalanced label scopes")
 
 	// resolve global identifiers within the same file
 	i := 0
