/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * index.go
 *
 *  Created on Apr 23, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

:import (
	"go/ast"
	r "reflect"
)

import (
	"go/ast"
	r "reflect"

	"github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)

// IndexExpr compiles a read operation on obj[idx]
func (c *Comp) IndexExpr(node *ast.IndexExpr) *Expr {
	return c.indexExpr(node, true)
}

// IndexExpr1 compiles a single-valued read operation on obj[idx]
func (c *Comp) IndexExpr1(node *ast.IndexExpr) *Expr {
	return c.indexExpr(node, false)
}

func (c *Comp) indexExpr(node *ast.IndexExpr, multivalued bool) *Expr {
	obj := c.Expr1(node.X, nil)
	idx := c.Expr1(node.Index, nil)
	if obj.Untyped() {
		obj.ConstTo(obj.DefaultType())
	}
	t := obj.Type
	var ret *Expr
	switch t.Kind() {
	case r.Array, r.Slice, r.String:
		ret = c.vectorIndex(node, obj, idx)
	case r.Map:
		if multivalued {
			ret = c.mapIndex(node, obj, idx)
		} else {
			ret = c.mapIndex1(node, obj, idx)
		}
	case r.Ptr:
		if t.Elem().Kind() == r.Array {
			objfun := obj.AsX1()
			deref := exprFun(t.Elem(), func(env *Env) r.Value {
				return objfun(env).Elem()
			})
			ret = c.vectorIndex(node, deref, idx)
			break
		}
		fallthrough
	default:
		c.Errorf("invalid operation: %v (type %v does not support indexing)", node, t)
		return nil
	}
	if obj.Const() && idx.Const() {
		// constant propagation
		ret.EvalConst(COptKeepUntyped)
	}
	return ret
}

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)
	if t == nil {
		return nil
	}
	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}


:func convertvalue(typ, val ast.Node) (ast.Node, ast.Node) {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		typ = ~'{r.Value}
	} else {
		// unwrap the result
		tname := t.Name()
		// remove final digits from t.Name()
		// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
		for len(tname) != 0 {
			ch := tname[len(tname)-1]
			if ch < '0' || ch > '9' {
				break
			}
			tname = tname[0:len(tname)-1]
		}
		if tname == "uintptr" {
			tname = "uint" // use reflect.Value.Uint()
		}
		sel := ~"{~,val . foo} // we modify it destructively
		sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

		switch t.Kind() {
		case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
			// result of reflect.Value.{tname} is already the correct type
			val = ~"{~,sel ()}
		default:
			// convert int64, uint64... to the correct type
			val = ~"{~,typ ( ~,sel () )}
		}
	}
	return typ, val
}

:macro vec_index_c(typ ast.Node) ast.Node {
	kind := makekind(typ)
	typv, val := convertvalue(typ, ~'{objv.Index(i)})
	fun := ~"{
		fun = func(env *Env) ~,typv {
			objv := objfun(env)
			return ~,val
		}
	}
	if kind == nil {
		return ~"{ default: ~,fun }
	} else {
		return ~"{ case ~,kind: ~,fun }
	}
}

:macro vec_index_e(typ ast.Node) ast.Node {
	kind := makekind(typ)
	typv, val := convertvalue(typ, ~'{objv.Index(i)})
	fun := ~"{
		fun = func(env *Env) ~,typv {
			objv := objfun(env)
			i := idxfun(env)
			return ~,val
		}
	}
	if kind == nil {
		return ~"{ default: ~,fun }
	} else {
		return ~"{ case ~,kind: ~,fun }
	}
}

// vectorIndex compiles obj[idx] where obj is an array or slice
func (c *Comp) vectorIndex(node *ast.IndexExpr, obj *Expr, idx *Expr) *Expr {
	k := idx.Type.Kind()
	cat := base.KindToCategory(k)
	if cat == r.Int || cat == r.Uint || idx.Untyped() {
		if !c.TypeOfInt().IdenticalTo(idx.Type) {
			idx = c.convert(idx, c.TypeOfInt(), node.Index)
		}
	} else {
		c.Errorf("non-integer %s index: %v <%v>", k, node.Index, idx.Type)
	}

	t := obj.Type
	if t.Kind() == r.String {
		return c.stringIndex(node, obj, idx)
	}

	t = t.Elem()
	objfun := obj.AsX1()
	var fun I
	if idx.Const() {
		i := idx.Value.(int)
		switch t.Kind() {
		{vec_index_c; bool}
		{vec_index_c; int}
		{vec_index_c; int8}
		{vec_index_c; int16}
		{vec_index_c; int32}
		{vec_index_c; int64}
		{vec_index_c; uint}
		{vec_index_c; uint8}
		{vec_index_c; uint16}
		{vec_index_c; uint32}
		{vec_index_c; uint64}
		{vec_index_c; uintptr}
		{vec_index_c; float32}
		{vec_index_c; float64}
		{vec_index_c; complex64}
		{vec_index_c; complex128}
		{vec_index_c; string}
		{vec_index_c; nil}
		}
	} else {
		idxfun := idx.WithFun().(func(*Env) int)
		switch t.Kind() {
		{vec_index_e; bool}
		{vec_index_e; int}
		{vec_index_e; int8}
		{vec_index_e; int16}
		{vec_index_e; int32}
		{vec_index_e; int64}
		{vec_index_e; uint}
		{vec_index_e; uint8}
		{vec_index_e; uint16}
		{vec_index_e; uint32}
		{vec_index_e; uint64}
		{vec_index_e; uintptr}
		{vec_index_e; float32}
		{vec_index_e; float64}
		{vec_index_e; complex64}
		{vec_index_e; complex128}
		{vec_index_e; string}
		{vec_index_e; nil}
		}
	}
	return exprFun(t, fun)
}

// stringIndex compiles obj[idx] where obj is a string
func (c *Comp) stringIndex(node *ast.IndexExpr, obj *Expr, idx *Expr) *Expr {
	idxfun := idx.WithFun().(func(*Env) int)
	objfun := obj.WithFun().(func(*Env) string)
	var fun func(env *Env) uint8
	if obj.Const() {
		str := obj.Value.(string)
		fun = func(env *Env) uint8 {
			i := idxfun(env)
			return str[i]
		}
	} else if idx.Const() {
		i := idx.Value.(int)
		fun = func(env *Env) uint8 {
			str := objfun(env)
			return str[i]
		}
	} else {
		fun = func(env *Env) uint8 {
			str := objfun(env)
			i := idxfun(env)
			return str[i]
		}
	}
	e := c.exprUint8(fun)
	if obj.Const() && idx.Const() {
		panicking := true
		defer func() {
			if panicking {
				recover()
				c.Errorf("string index out of range: %v", node)
			}
		}()
		e.EvalConst(COptKeepUntyped)
		panicking = false
	}
	return e
}

// mapIndex compiles obj[idx] where obj is a map
func (c *Comp) mapIndex(node *ast.IndexExpr, obj *Expr, idx *Expr) *Expr {
	t := obj.Type
	tkey := t.Key()
	tval := t.Elem()
	idxconst := idx.Const()
	if idxconst {
		idx.ConstTo(tkey)
	} else if idx.Type == nil || !idx.Type.AssignableTo(tkey) {
		c.Errorf("cannot use %v <%v> as <%v> in map index", node.Index, idx.Type, tkey)
	}
	objfun := obj.AsX1()
	zero := xr.Zero(tval)
	var fun func(env *Env) (r.Value, []r.Value)
	if idxconst {
		key := r.ValueOf(idx.Value)
		fun = func(env *Env) (r.Value, []r.Value) {
			obj := objfun(env)
			val := obj.MapIndex(key)
			var ok r.Value
			if val == base.Nil {
				val = zero // map[key] returns the zero value if key is not present
				ok = base.False
			} else {
				ok = base.True
			}
			return val, []r.Value{val, ok}
		}
	} else {
		keyfun := idx.AsX1()
		fun = func(env *Env) (r.Value, []r.Value) {
			obj := objfun(env)
			key := keyfun(env)
			val := obj.MapIndex(key)
			var ok r.Value
			if val == base.Nil {
				val = zero // map[key] returns the zero value if key is not present
				ok = base.False
			} else {
				ok = base.True
			}
			return val, []r.Value{val, ok}
		}
	}
	return exprXV([]xr.Type{tval, c.TypeOfBool()}, fun)
}

:macro mapindex1_c(typ ast.Node) ast.Node {
	if EvalType(typ) == nil {
		return ~'{
			zero := xr.Zero(tval)
			fun = func(env *Env) r.Value {
				obj := objfun(env)
				result := obj.MapIndex(key)
				if result == base.Nil {
					result = zero
				}
				return result
			}
		}
	}
	_, unwrap := convertvalue(typ, ~'v)
	return ~"{
		fun = func(env *Env) ~,typ {
			obj := objfun(env)
			v := obj.MapIndex(key)
			var result ~,typ
			if v != base.Nil {
				result = ~,unwrap
			}
			return result
		}
	}
}

:macro mapindex1_e(typ ast.Node) ast.Node {
	if EvalType(typ) == nil {
		return ~'{
			zero := xr.Zero(tval)
			fun = func(env *Env) r.Value {
				obj := objfun(env)
				key := keyfun(env)
				result := obj.MapIndex(key)
				if result == base.Nil {
					result = zero
				}
				return result
			}
		}
	}
	_, unwrap := convertvalue(typ, ~'v)
	return ~"{
		fun = func(env *Env) ~,typ {
			obj := objfun(env)
			key := keyfun(env)
			v := obj.MapIndex(key)
			var result ~,typ
			if v != base.Nil {
				result = ~,unwrap
			}
			return result
		}
	}
}

// mapIndex1 compiles obj[idx] where obj is a map, in single-value context
func (c *Comp) mapIndex1(node *ast.IndexExpr, obj *Expr, idx *Expr) *Expr {
	t := obj.Type
	tkey := t.Key()
	tval := t.Elem()
	idxconst := idx.Const()
	if idxconst {
		idx.ConstTo(tkey)
	} else if idx.Type == nil || !idx.Type.AssignableTo(tkey) {
		c.Errorf("cannot use %v <%v> as <%v> in map index", node.Index, idx.Type, tkey)
	}
	objfun := obj.AsX1()
	var fun I
	if idxconst {
		key := r.ValueOf(idx.Value)
		switch tval.Kind() {
		case r.Bool:       mapindex1_c; bool
		case r.Int:        mapindex1_c; int
		case r.Int8:       mapindex1_c; int8
		case r.Int16:      mapindex1_c; int16
		case r.Int32:      mapindex1_c; int32
		case r.Int64:      mapindex1_c; int64
		case r.Uint:       mapindex1_c; uint
		case r.Uint8:      mapindex1_c; uint8
		case r.Uint16:     mapindex1_c; uint16
		case r.Uint32:     mapindex1_c; uint32
		case r.Uint64:     mapindex1_c; uint64
		case r.Uintptr:    mapindex1_c; uintptr
		case r.Float32:    mapindex1_c; float32
		case r.Float64:    mapindex1_c; float64
		case r.Complex64:  mapindex1_c; complex64
		case r.Complex128: mapindex1_c; complex128
		case r.String:     mapindex1_c; string
		default:           mapindex1_c; nil
		}
	} else {
		keyfun := idx.AsX1()
		switch tval.Kind() {
		case r.Bool:       mapindex1_e; bool
		case r.Int:        mapindex1_e; int
		case r.Int8:       mapindex1_e; int8
		case r.Int16:      mapindex1_e; int16
		case r.Int32:      mapindex1_e; int32
		case r.Int64:      mapindex1_e; int64
		case r.Uint:       mapindex1_e; uint
		case r.Uint8:      mapindex1_e; uint8
		case r.Uint16:     mapindex1_e; uint16
		case r.Uint32:     mapindex1_e; uint32
		case r.Uint64:     mapindex1_e; uint64
		case r.Uintptr:    mapindex1_e; uintptr
		case r.Float32:    mapindex1_e; float32
		case r.Float64:    mapindex1_e; float64
		case r.Complex64:  mapindex1_e; complex64
		case r.Complex128: mapindex1_e; complex128
		case r.String:     mapindex1_e; string
		default:           mapindex1_e; nil
		}
	}
	return exprFun(tval, fun)
}

// IndexPlace compiles obj[idx] returning a Place, i.e. a settable (and addressable, if possible) reflect.Value
func (c *Comp) IndexPlace(node *ast.IndexExpr, opt PlaceOption) *Place {
	obj := c.Expr1(node.X, nil)
	idx := c.Expr1(node.Index, nil)
	if obj.Untyped() {
		obj.ConstTo(obj.DefaultType())
	}
	t := obj.Type
	switch t.Kind() {
	case r.Array, r.Slice:
		return c.vectorPlace(node, obj, idx)
	case r.String:
		// bytes in a string are not settable nor addressable
		c.Errorf("%s a byte in a string: %v", opt, node)
		return nil
	case r.Map:
		// elements in a map are settable but not addressable
		if opt == PlaceAddress {
			c.Errorf("%s a map element: %v", opt, node)
			return nil
		}
		return c.mapPlace(node, obj, idx)
	case r.Ptr:
		if t.Elem().Kind() == r.Array {
			return c.vectorPtrPlace(node, obj, idx)
		}
		fallthrough
	default:
		c.Errorf("invalid operation: %v (type %v does not support indexing)", node, t)
		return nil
	}
}

// mapPlace compiles obj[idx] where obj is a map, returning a settable place
func (c *Comp) mapPlace(node *ast.IndexExpr, obj *Expr, idx *Expr) *Place {
	tmap := obj.Type
	tkey := tmap.Key()
	idxconst := idx.Const()
	if idxconst {
		idx.ConstTo(tkey)
	} else if idx.Type == nil || !idx.Type.AssignableTo(tkey) {
		c.Errorf("cannot use %v <%v> as type <%v> in map index: %v", node.Index, idx.Type, tkey, node)
	}
	return &Place{Var: Var{Type: tmap.Elem()}, Fun: obj.AsX1(), MapKey: idx.AsX1(), MapType: tmap}
}

// vectorPlace compiles obj[idx] where obj is an array or slice, returning a settable and addressable place
func (c *Comp) vectorPlace(node *ast.IndexExpr, obj *Expr, idx *Expr) *Place {
	idxconst := idx.Const()
	if idxconst {
		idx.ConstTo(c.TypeOfInt())
	} else if idx.Type == nil || !idx.Type.AssignableTo(c.TypeOfInt()) {
		c.Errorf("non-integer %s index: %v <%v>", obj.Type.Kind(), node.Index, idx.Type)
	}
	t := obj.Type.Elem()
	objfun := obj.AsX1()
	var fun, addr func(env *Env) r.Value
	if idxconst {
		i := idx.Value.(int)
		fun = func(env *Env) r.Value {
			objv := objfun(env)
			return objv.Index(i)
		}
		addr = func(env *Env) r.Value {
			objv := objfun(env)
			return objv.Index(i).Addr()
		}
	} else {
		idxfun := idx.WithFun().(func(*Env) int)
		fun = func(env *Env) r.Value {
			objv := objfun(env)
			i := idxfun(env)
			return objv.Index(i)
		}
		addr = func(env *Env) r.Value {
			objv := objfun(env)
			i := idxfun(env)
			return objv.Index(i).Addr()
		}
	}
	return &Place{Var: Var{Type: t}, Fun: fun, Addr: addr}
}

// vectorPtrPlace compiles obj[idx] where obj is a pointer to an array, returning a settable and addressable reflect.Value
func (c *Comp) vectorPtrPlace(node *ast.IndexExpr, obj *Expr, idx *Expr) *Place {
	idxconst := idx.Const()
	if idxconst {
		idx.ConstTo(c.TypeOfInt())
	} else if idx.Type == nil || !idx.Type.AssignableTo(c.TypeOfInt()) {
		c.Errorf("non-integer %s index: %v <%v>", obj.Type.Kind(), node.Index, idx.Type)
	}
	t := obj.Type.Elem().Elem() // Elem() for the pointer to array, another Elem() for the array element type
	objfun := obj.AsX1()
	var fun, addr func(env *Env) r.Value
	if idxconst {
		i := idx.Value.(int)
		fun = func(env *Env) r.Value {
			objv := objfun(env).Elem()
			return objv.Index(i)
		}
		addr = func(env *Env) r.Value {
			objv := objfun(env).Elem()
			return objv.Index(i).Addr()
		}
	} else {
		idxfun := idx.WithFun().(func(*Env) int)
		fun = func(env *Env) r.Value {
			objv := objfun(env).Elem()
			i := idxfun(env)
			return objv.Index(i)
		}
		addr = func(env *Env) r.Value {
			objv := objfun(env).Elem()
			i := idxfun(env)
			return objv.Index(i).Addr()
		}
	}
	return &Place{Var: Var{Type: t}, Fun: fun, Addr: addr}
}
