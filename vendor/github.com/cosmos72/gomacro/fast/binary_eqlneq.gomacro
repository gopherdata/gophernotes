/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * binary_eql.go
 *
 *  Created on Apr 02, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/token"
	"go/ast"
	r "reflect"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	"fmt"
	"go/ast"
	"go/token"
	r "reflect"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)

	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}


:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro eqlneq(opnode, xconst, yconst, typ ast.Node) ast.Node {

	// the return type of Eval() and EvalType() varies. better check early.
	xc, yc := Eval(xconst).(bool), Eval(yconst).(bool)
	optoken := Eval(opnode).(token.Token)

	if xc == yc {
		var expr *ast.BinaryExpr = ~"{x(env) && y(env)} // quasiquote, we modify it destructively
		expr.Op = optoken

		return ~"{
			x := x.(func(*Env) ~,typ)
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) bool {
				return ~,expr
			}
		}
	} else if yc {
		var expr *ast.BinaryExpr = ~"{x(env) && y} // quasiquote, we modify it destructively
		expr.Op = optoken

		yconv := convertvalue1(typ, ~'yv)
		return ~"{
			x := x.(func(*Env) ~,typ)
			y := ~,yconv
			fun = func(env *Env) bool {
				return ~,expr
			}
		}
	} else {
		var expr *ast.BinaryExpr = ~"{x && y(env)} // quasiquote, we modify it destructively
		expr.Op = optoken

		xconv := convertvalue1(typ, ~'xv)
		return ~"{
			x := ~,xconv
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) bool {
				return ~,expr
			}
		}
	}
}

:macro eqlneqs(opnode, xconst, yconst, types ast.Node) ast.Node {
	typelist := types.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, 0, len(typelist))
	for _, typ := range typelist {
		t := EvalType(typ)
		if t.Kind() == r.Int {
			// shortcut for all int* types
			for _, typ := range []ast.Expr{~'int, ~'int8, ~'int16, ~'int32, ~'int64} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: eqlneq; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			}
		} else if t.Kind() == r.Uint {
			// shortcut for all uint* types
			for _, typ := range []ast.Expr{~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: eqlneq; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			}
		} else {
			kind := makekind(typ)
			caselist = append(caselist, ~"{case ~,kind: eqlneq; ~,opnode; ~,xconst; ~,yconst; ~,typ})
		}
	}
	return ~"{ switch k { ~,@caselist } }
}

func (c *Comp) Eql(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	if xe.IsNil() {
		if ye.IsNil() {
			return c.invalidBinaryExpr(node, xe, ye)
		} else {
			// nil == expr
			return c.eqlneqNil(node, xe, ye)
		}
	} else if ye.IsNil() {
		// expr == nil
		return c.eqlneqNil(node, xe, ye)
	}
	if !xe.Type.Comparable() || !xe.Type.Comparable() {
		return c.invalidBinaryExpr(node, xe, ye)
	}
	xc, yc := xe.Const(), ye.Const()
	if xe.Type.Kind() != r.Interface && ye.Type.Kind() != r.Interface {
		// comparison between different types is allowed only if at least one is an interface
		c.toSameFuncType(node, xe, ye)
	}
	k := xe.Type.Kind()
	yk := ye.Type.Kind() // may differ from k

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun func(env *Env) bool
	if k != yk {
		// call c.eqlneqMisc() below
	} else if xc == yc {
		x, y := xe.Fun, ye.Fun
		{eqlneqs; token.EQL; false; false; { bool; int; uint; float32; float64; complex64; complex128; string } }
	} else if yc {
		x := xe.Fun
		yv := r.ValueOf(ye.Value)
		if k == r.Bool && yv.Bool() {
		    // xe == true is the same as xe
			return xe
		}
		{eqlneqs; token.EQL; false; true; { bool; int; uint; float32; float64; complex64; complex128; string } }
	} else {
		xv := r.ValueOf(xe.Value)
		y := ye.Fun
		if k == r.Bool && xv.Bool() {
		    // true == ye is the same as ye
			return ye
		}
		{eqlneqs; token.EQL; true; false; { bool; int; uint; float32; float64; complex64; complex128; string } }
	}
	if fun != nil {
		return c.exprBool(fun)
	}
	return c.eqlneqMisc(node, xe, ye)
}

func (c *Comp) Neq(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	if xe.IsNil() {
		if ye.IsNil() {
			return c.invalidBinaryExpr(node, xe, ye)
		} else {
			// nil == expr
			return c.eqlneqNil(node, xe, ye)
		}
	} else if ye.IsNil() {
		// expr == nil
		return c.eqlneqNil(node, xe, ye)
	}
	if !xe.Type.Comparable() || !xe.Type.Comparable() {
		return c.invalidBinaryExpr(node, xe, ye)
	}
	xc, yc := xe.Const(), ye.Const()
	if xe.Type.Kind() != r.Interface && ye.Type.Kind() != r.Interface {
		// comparison between different types is allowed only if at least one is an interface
		c.toSameFuncType(node, xe, ye)
	}
	k := xe.Type.Kind()
	yk := ye.Type.Kind() // may differ from k

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun func(env *Env) bool
	if k != yk {
		// call c.eqlneqMisc() below
	} else if xc == yc {
		x, y := xe.Fun, ye.Fun
		{eqlneqs; token.NEQ; false; false; { int; uint; float32; float64; complex64; complex128; string } }
	} else if yc {
		x := xe.Fun
		yv := r.ValueOf(ye.Value)
		if k == r.Bool && !yv.Bool() {
		    // xe != false is the same as xe
			return xe
		}
		{eqlneqs; token.NEQ; false; true; { int; uint; float32; float64; complex64; complex128; string } }
	} else {
		xv := r.ValueOf(xe.Value)
		y := ye.Fun
		if k == r.Bool && !xv.Bool() {
		    // false != ye is the same as ye
			return ye
		}
		{eqlneqs; token.NEQ; true; false; { int; uint; float32; float64; complex64; complex128; string } }
	}
	if fun != nil {
		return c.exprBool(fun)
	}
	return c.eqlneqMisc(node, xe, ye)
}

// compare arrays, interfaces, pointers, structs
func (c *Comp) eqlneqMisc(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	var fun func(*Env) bool

	x := xe.AsX1()
	y := ye.AsX1()
	t1 := xe.Type
	t2 := ye.Type
	extractor1 := c.extractor(t1)
	extractor2 := c.extractor(t2)
	
	if node.Op == token.EQL {
		fun = func(env *Env) bool {
			v1 := x(env)
			v2 := y(env)
			if v1 == Nil || v2 == Nil {
				return v1 == v2
			}
			t1, t2 := t1, t2
			if extractor1 != nil {
				v1, t1 = extractor1(v1)
			}
			if extractor2 != nil {
				v2, t2 = extractor2(v2)
			}
			if v1 == Nil || v2 == Nil {
				return v1 == v2
			}
			return v1.Interface() == v2.Interface() &&
				(t1 == nil || t2 == nil || t1.IdenticalTo(t2))
		}
	} else {
		fun = func(env *Env) bool {
			v1 := x(env)
			v2 := y(env)
			if v1 == Nil || v2 == Nil {
				return v1 != v2
			}
			t1, t2 := t1, t2
			if extractor1 != nil {
				v1, t1 = extractor1(v1)
			}
			if extractor2 != nil {
				v2, t2 = extractor2(v2)
			}
			if v1 == Nil || v2 == Nil {
				return v1 != v2
			}
			return v1.Interface() != v2.Interface() ||
				(t1 != nil && t2 != nil && !t1.IdenticalTo(t2))
		}
	}
	return c.exprBool(fun)
}

func (c *Comp) eqlneqNil(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	var e *Expr
	if ye.IsNil() {
		e = xe
	} else {
		e = ye
	}
	// e can be a constant... for example nil == nil
	if !IsNillableKind(e.Type.Kind()) {
		return c.invalidBinaryExpr(node, xe, ye)
	}

	var fun func(env *Env) bool
	if f, ok := e.Fun.(func(env *Env) (r.Value, []r.Value)); ok {
		e.CheckX1() // to warn or error as appropriate
		if node.Op == token.EQL {
			fun = func(env *Env) bool {
				v, _ := f(env)
				vnil := v == Nil || IsNillableKind(v.Kind()) && v.IsNil()
				return vnil
			}
		} else {
			fun = func(env *Env) bool {
				v, _ := f(env)
				vnil := v == Nil || IsNillableKind(v.Kind()) && v.IsNil()
				return !vnil
			}
		}
	} else {
		f := e.AsX1()
		if node.Op == token.EQL {
			fun = func(env *Env) bool {
				v := f(env)
				vnil := v == Nil || IsNillableKind(v.Kind()) && v.IsNil()
				return vnil
			}
		} else {
			fun = func(env *Env) bool {
				v := f(env)
				vnil := v == Nil || IsNillableKind(v.Kind()) && v.IsNil()
				return !vnil
			}
		}
	}
	return c.exprBool(fun)
}
