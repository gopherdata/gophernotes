/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * place_ops.go
 *
 *  Created on Apr 25, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/token"
	r "reflect"

	. "github.com/cosmos72/gomacro/base"
)


:import (
	"fmt"
	"go/ast"
	"go/token"
	r "reflect"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makeupcase(node ast.Node, name string) ast.Node {
	// go/ast.SelectorExpr requires the foo in x.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{~,node . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(name)}
	return kind
}

:func makekind(typ ast.Node) ast.Node {
	name := EvalType(typ).Name()
	return makeupcase(~'r, name)
}

:func makeunwrapvalue(node ast.Node, typ ast.Node) ast.Node {
	name := EvalType(typ).Name()

	// remove final digits from name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(name) != 0 {
		ch := name[len(name)-1]
		if ch < '0' || ch > '9' {
			break
		}
		name = name[0:len(name)-1]
	}
	if name == "uintptr" {
		name = "uint" // use reflect.Value.Uint()
	}

	return makeupcase(node, name)
}

:func op_to_assign(op token.Token) token.Token {
	switch op {
	case token.ADD:
		op = token.ADD_ASSIGN
	case token.SUB:
		op = token.SUB_ASSIGN
	case token.MUL:
		op = token.MUL_ASSIGN
	case token.QUO:
		op = token.QUO_ASSIGN
	case token.REM:
		op = token.REM_ASSIGN
	case token.AND:
		op = token.AND_ASSIGN
	case token.OR:
		op = token.OR_ASSIGN
	case token.XOR:
		op = token.XOR_ASSIGN
	case token.SHL:
		op = token.SHL_ASSIGN
	case token.SHR:
		op = token.SHR_ASSIGN
	case token.AND_NOT:
		op = token.AND_NOT_ASSIGN
	default:
		panic(fmt.Sprintf("cannot convert token %s to assignment token", op))
	}
	return op
}

:func fsetplace(opnode, typ, expr ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	var bind ast.Node
	var result *ast.BinaryExpr
	op := Eval(opnode).(token.Token)
	opset := op_to_assign(op)

	switch t.Kind() {
		case r.Int, r.Int8, r.Int16, r.Int32:
			result = ~"{lhs.Int() + int64(~,expr)}
			result.Op = op
			bind = ~"{lhs.SetInt(~,result)}
		case r.Int64:
			result = ~"{lhs.Int() + ~,expr}
			result.Op = op
			bind = ~"{lhs.SetInt(~,result)}
		case r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uintptr:
			result = ~"{lhs.Uint() + uint64(~,expr)}
			result.Op = op
			bind = ~"{lhs.SetUint(~,result)}
		case r.Uint64:
			result = ~"{lhs.Uint() + ~,expr}
			result.Op = op
			bind = ~"{lhs.SetUint(~,result)}
		case r.Float32:
			result = ~"{lhs.Float() + float64(~,expr)}
			result.Op = op
			bind = ~"{lhs.SetFloat(~,result)}
		case r.Float64:
			result = ~"{lhs.Float() + ~,expr}
			result.Op = op
			bind = ~"{lhs.SetFloat(~,result)}
		case r.Complex64:
			result = ~"{lhs.Complex() + complex128(~,expr)}
			result.Op = op
			bind = ~"{lhs.SetComplex(~,result)}
		case r.Complex128:
			result = ~"{lhs.Complex() + ~,expr}
			result.Op = op
			bind = ~"{lhs.SetComplex(~,result)}
		case r.String:
			result = ~"{lhs.String() + ~,expr}
			result.Op = op
			bind = ~"{lhs.SetString(~,result)}
		default:
			panic("unimplemented: <" + t.String() + "> " + opset.String() + " expression" )
	}

	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			lhs := lhsfun(env)
			~,bind
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:func fsetmap(opnode, typ, expr ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	var curr *ast.BlockStmt
	var result *ast.AssignStmt = ~"{result += ~,expr}
	op := Eval(opnode).(token.Token)
	opset := op_to_assign(op)
	result.Tok = opset

	switch t.Kind() {
		case r.Int, r.Int8, r.Int16, r.Int32:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = ~,typ(v.Int()) }}
		case r.Int64:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = v.Int() }}
		case r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uintptr:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = ~,typ(v.Uint()) }}
		case r.Uint64:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = v.Uint() }}
		case r.Float32:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = ~,typ(v.Float()) }}
		case r.Float64:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = v.Float() }}
		case r.Complex64:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = ~,typ(v.Complex()) }}
		case r.Complex128:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = v.Complex() }}
		case r.String:
			curr = ~"{var result ~,typ; if v := lhs.MapIndex(key); v != Nil { result = v.String() }}
		default:
			panic("unimplemented: <" + t.String() + "> " + opset.String() + " expression" )
	}

	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			lhs := lhsfun(env)
			key := keyfun(env)
			~,@curr
			~,result
			lhs.SetMapIndex(key, r.ValueOf(result))
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:macro setplace_const(opnode, typ ast.Node) ast.Node {
	return fsetplace(opnode, typ, ~'val)
}

:macro setplace_expr(opnode, typ ast.Node) ast.Node {
	return fsetplace(opnode, typ, ~'{fun(env)})
}

:macro setmap_const(opnode, typ ast.Node) ast.Node {
	return fsetmap(opnode, typ, ~'val)
}

:macro setmap_expr(opnode, typ ast.Node) ast.Node {
	return fsetmap(opnode, typ, ~'{fun(env)})
}


:func list_types(typelist []ast.Stmt) []ast.Node {
	rets := make([]ast.Node, 0, len(typelist))
	for _, typ := range typelist {
		t := EvalType(typ)
		if t == nil {
			rets = append(rets, ~'nil)
		} else if t.Kind() == r.Int {
			rets = append(rets, ~'int, ~'int8, ~'int16, ~'int32, ~'int64)
		} else if t.Kind() == r.Uint {
			rets = append(rets, ~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr)
		} else if t.Kind() == r.Float64 {
			rets = append(rets, ~'float32, ~'float64)
		} else if t.Kind() == r.Complex128 {
			rets = append(rets, ~'complex64, ~'complex128)
		} else {
			rets = append(rets, typ)
		}
	}
	return rets
}

:macro setplaces_const(opnode, types ast.Node) ast.Node {
	// separate cases for int8, uint16... not needed
	typelist := types.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, len(typelist))
	for i, typ := range typelist {
		if EvalType(typ) == nil {
			caselist[i] = ~"{default: c.Errorf(`invalid operator %s= on <%v>`, ~,opnode, place.Type)}
		} else {
			kind := makekind(typ)
			unwrap := makeunwrapvalue(~'v, typ)
			caselist[i] = ~"{case ~,kind:
				val := ~,unwrap ()
				setplace_const; ~,opnode; ~,typ
			}
		}
	}
	// separate cases for int8, uint16... are needed
	maptypelist := list_types(types.(*ast.BlockStmt).List)
	mapcaselist := make([]ast.Stmt, len(maptypelist))
	for i, typ := range maptypelist {
		if EvalType(typ) == nil {
			mapcaselist[i] = ~"{default: c.Errorf(`invalid operator %s= on <%v>`, ~,opnode, place.Type)}
		} else {
			kind := makekind(typ)
			unwrap := makeunwrapvalue(~'v, typ)
			mapcaselist[i] = ~"{case ~,kind:
				val := ~,typ( ~,unwrap () )
				setmap_const; ~,opnode; ~,typ
			}
		}
	}
	return ~"{
		var ret Stmt
		lhsfun := place.Fun
		keyfun := place.MapKey
		v := r.ValueOf(val)

		if keyfun == nil {
			switch KindToCategory(place.Type.Kind()) {
				~,@caselist
			}
		} else {
			switch place.Type.Kind() {
				~,@mapcaselist
			}
		}
		c.append(ret)
	}
}

:macro setplaces_expr(opnode, types ast.Node) ast.Node {
	typelist := list_types(types.(*ast.BlockStmt).List)
	caselist := make([]ast.Stmt, len(typelist))
	mapcaselist := make([]ast.Stmt, len(typelist))
	for i, typ := range typelist {
		if EvalType(typ) == nil {
			caselist[i] = ~"{default: c.Errorf(`invalid operator %s= between <%v> and <%v>`, ~,opnode, place.Type, funTypeOut(fun))}
			mapcaselist[i] = caselist[i]
		} else {
			caselist[i] = ~"{~typecase func(*Env) ~,typ:
				setplace_expr; ~,opnode; ~,typ
			}
			mapcaselist[i] = ~"{~typecase func(*Env) ~,typ:
				setmap_expr; ~,opnode; ~,typ
			}
		}
	}
	return ~"{
		var ret Stmt
		lhsfun := place.Fun
		keyfun := place.MapKey
		if keyfun == nil {
			switch fun := fun.(type) {
				~,@caselist
			}
		} else {
			switch fun := fun.(type) {
				~,@mapcaselist
			}
		}
		c.append(ret)
	}
}

// varAddConst compiles 'place += constant'
func (c *Comp) placeAddConst(place *Place, val I) {
	if isLiteralNumber(val, 0) || val == "" {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.ADD; {int; uint; float64; complex128; string; nil}
}

// varAddExpr compiles 'place += expression'
func (c *Comp) placeAddExpr(place *Place, fun I) {
	setplaces_expr; token.ADD; {int; uint; float64; complex128; string; nil}
}

// placeSubConst compiles 'place -= constant'
func (c *Comp) placeSubConst(place *Place, val I) {
	if isLiteralNumber(val, 0) {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.SUB; {int; uint; float64; complex128; nil}
}

// placeSubExpr compiles 'place -= expression'
func (c *Comp) placeSubExpr(place *Place, fun I) {
	setplaces_expr; token.SUB; {int; uint; float64; complex128; nil}
}

// placeMulConst compiles 'place *= constant'
func (c *Comp) placeMulConst(place *Place, val I) {
	if isLiteralNumber(val, 0) {
		// placeiable *= 0 is equivalent to place = 0
		c.placeSetZero(place)
		return
	} else if isLiteralNumber(val, 1) {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.MUL; {int; uint; float64; complex128; nil}
}

// placeMulExpr compiles 'place *= expression'
func (c *Comp) placeMulExpr(place *Place, fun I) {
	setplaces_expr; token.MUL; {int; uint; float64; complex128; nil}
}

// placeQuoConst compiles 'place /= constant'
func (c *Comp) placeQuoConst(place *Place, val I) {
	if c.placeQuoPow2(place, val) {
		return
	}
	setplaces_const; token.QUO; {int; uint; float64; complex128; nil}
}

// placeQuoExpr compiles 'place /= expression'
func (c *Comp) placeQuoExpr(place *Place, fun I) {
	setplaces_expr; token.QUO; {int; uint; float64; complex128; nil}
}

// placeRemConst compiles 'place %= constant'
func (c *Comp) placeRemConst(place *Place, val I) {
	if IsCategory(place.Type.Kind(), r.Int, r.Uint) {
		if isLiteralNumber(val, 0) {
			c.Errorf("division by %v <%v>", val, place.Type)
			return
		} else if isLiteralNumber(val, 1) {
			// place %= 1 is equivalent to place = 0
			c.placeSetZero(place)
			return
		}
	}
	setplaces_const; token.REM; {int; uint; nil}
}

// placeRemExpr compiles 'place %= expression'
func (c *Comp) placeRemExpr(place *Place, fun I) {
	setplaces_expr; token.REM; {int; uint; nil}
}

// placeAndConst compiles 'place &= constant'
func (c *Comp) placeAndConst(place *Place, val I) {
	if IsCategory(place.Type.Kind(), r.Int, r.Uint) {
		if isLiteralNumber(val, -1) {
			c.placeForSideEffects(place)
			return
		} else if isLiteralNumber(val, 0) {
			// place &= 0 is equivalent to place = 0
			c.placeSetZero(place)
			return
		}
	}
	setplaces_const; token.AND; {int; uint; nil}
}

// placeAndExpr compiles 'place &= expression'
func (c *Comp) placeAndExpr(place *Place, fun I) {
	setplaces_expr; token.AND; {int; uint; nil}
}

// placeOrConst compiles 'place |= constant'
func (c *Comp) placeOrConst(place *Place, val I) {
	if IsCategory(place.Type.Kind(), r.Int, r.Uint) && isLiteralNumber(val, 0) {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.OR; {int; uint; nil}
}

// placeOrExpr compiles 'place |= expression'
func (c *Comp) placeOrExpr(place *Place, fun I) {
	setplaces_expr; token.OR; {int; uint; nil}
}

// placeXorConst compiles 'place ^= constant'
func (c *Comp) placeXorConst(place *Place, val I) {
	if IsCategory(place.Type.Kind(), r.Int, r.Uint) && isLiteralNumber(val, 0) {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.XOR; {int; uint; nil}
}

// placeXorExpr compiles 'place ^= expression'
func (c *Comp) placeXorExpr(place *Place, fun I) {
	setplaces_expr; token.XOR; {int; uint; nil}
}

// placeAndnotConst compiles 'place &^= constant'
func (c *Comp) placeAndnotConst(place *Place, val I) {
	if IsCategory(place.Type.Kind(), r.Int, r.Uint) {
		if isLiteralNumber(val, -1) {
			// place &^= -1 is equivalent to place = 0
			c.placeSetZero(place)
			return
		} else if isLiteralNumber(val, 0) {
			c.placeForSideEffects(place)
			return
		}
	}
	setplaces_const; token.AND_NOT; {int; uint; nil}
}

// varAndnotExpr compiles 'place &^= expression'
func (c *Comp) placeAndnotExpr(place *Place, fun I) {
	setplaces_expr; token.AND_NOT; {int; uint; nil}
}


// SetPlace compiles an assignment to a place:
// 'place op constant' and 'place op expression'
func (c *Comp) SetPlace(place *Place, op token.Token, init *Expr) {
	if place.IsVar() {
		c.SetVar(&place.Var, op, init)
		return
	}
	t := place.Type
	if init.Const() {
		init.ConstTo(t)
	} else if init.Type == nil || !init.Type.AssignableTo(t) {
		c.Errorf("incompatible types in assignment: <%v> %s <%v>", t, op, init.Type)
		return
	}
	rt := t.ReflectType()
	if init.Const() {
		val := init.Value
		v := r.ValueOf(val)
		if v == None || v == Nil {
			v = r.Zero(rt)
			val = v.Interface()
		} else if v.Type() != rt {
			v = v.Convert(rt)
			val = v.Interface()
		}
		switch op {
		case token.ASSIGN:
			c.placeSetConst(place, val)
		case token.ADD, token.ADD_ASSIGN:
			c.placeAddConst(place, val)
		case token.SUB, token.SUB_ASSIGN:
			c.placeSubConst(place, val)
		case token.MUL, token.MUL_ASSIGN:
			c.placeMulConst(place, val)
		case token.QUO, token.QUO_ASSIGN:
			c.placeQuoConst(place, val)
		case token.REM, token.REM_ASSIGN:
			c.placeRemConst(place, val)
		case token.AND, token.AND_ASSIGN:
			c.placeAndConst(place, val)
		case token.OR, token.OR_ASSIGN:
			c.placeOrConst(place, val)
		case token.XOR, token.XOR_ASSIGN:
			c.placeAndConst(place, val)
		case token.AND_NOT, token.AND_NOT_ASSIGN:
			c.placeAndnotConst(place, val)
		default:
			c.Errorf("operator %s is not implemented", op)
		}
	} else {
		fun := init.Fun
		switch op {
		case token.ASSIGN:
			c.placeSetExpr(place, fun)
		case token.ADD, token.ADD_ASSIGN:
			c.placeAddExpr(place, fun)
		case token.SUB, token.SUB_ASSIGN:
			c.placeSubExpr(place, fun)
		case token.MUL, token.MUL_ASSIGN:
			c.placeMulExpr(place, fun)
		case token.QUO, token.QUO_ASSIGN:
			c.placeQuoExpr(place, fun)
		case token.REM, token.REM_ASSIGN:
			c.placeRemExpr(place, fun)
		case token.AND, token.AND_ASSIGN:
			c.placeAndExpr(place, fun)
		case token.OR, token.OR_ASSIGN:
			c.placeOrExpr(place, fun)
		case token.XOR, token.XOR_ASSIGN:
			c.placeAndExpr(place, fun)
		case token.AND_NOT, token.AND_NOT_ASSIGN:
			c.placeAndnotExpr(place, fun)
		default:
			c.Errorf("operator %s is not implemented", op)
		}
	}
}


