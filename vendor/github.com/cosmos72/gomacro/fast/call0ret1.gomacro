/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * call0ret1.go
 *
 *  Created on Apr 20, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func maketypevar(typ ast.Node) ast.Node {
	t := EvalType(typ)
	sel := &ast.SelectorExpr{
		X: &ast.Ident{Name: "c"},
		Sel: &ast.Ident{Name: "TypeOf" + upcasefirstbyte(t.Name())},
	}
	return ~"{~,sel ()}
}

:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro mcall0ret1(rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil {
		// keep the result wrapped in a reflect.Value
		return ~"{
			ret = func(env *Env) r.Value {
				funv := exprfun(env)
				return funv.Call(base.ZeroValues)[0]
			}
		}
	}

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfun = funv.Interface().(func() ~,rettyp)
			cachedfunv = funv
		}
	}

	typevar := maketypevar(rettyp)
	retconv := convertvalue1(rettyp, ~'ret)

	return ~"{
		if !tret.IdenticalTo(~,typevar) {
			ret = func(env *Env) ~,rettyp {
				fun := exprfun(env)
				// Debugf("calling %v with args []", fun.Type())
				ret := fun.Call(base.ZeroValues)[0]
				return ~,retconv
			}
		} else if funsym != nil {
			switch funupn {
			case maxdepth - 1:
				var cachedfun func() ~,rettyp
				ret = func(env *Env) ~,rettyp {
					funv := env.FileEnv.Vals[funindex]
					~,cachefun
					// Debugf("calling %v with args []", r.TypeOf(cachedfun))
					return cachedfun()
				}
			case 0:
				ret = func(env *Env) ~,rettyp {
					fun := env.Vals[funindex].Interface().(func() ~,rettyp)
					// Debugf("calling %v with args []", r.TypeOf(fun))
					return fun()
				}
			case 1:
				ret = func(env *Env) ~,rettyp {
					fun := env.Outer.Vals[funindex].Interface().(func() ~,rettyp)
					// Debugf("calling %v with args []", r.TypeOf(fun))
					return fun()
				}
			case 2:
				ret = func(env *Env) ~,rettyp {
					fun := env.Outer.Outer.Vals[funindex].Interface().(func() ~,rettyp)
					// Debugf("calling %v with args []", r.TypeOf(fun))
					return fun()
				}
			}
		}
		if ret == nil {
			ret = func(env *Env) ~,rettyp {
				fun := exprfun(env).Interface().(func() ~,rettyp)
				// Debugf("calling %v with args []", r.TypeOf(fun))
				return fun()
			}
		}
	}
}

func (c *Comp) call0ret1(call *Call, maxdepth int) I {
	expr := call.Fun
	exprfun := expr.AsX1()
	funsym := expr.Sym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
		if funindex == NoIndex {
			base.Errorf("internal error: call0ret1() invoked for constant function %#v. use call_builtin() instead", expr)
		}
	}
	tret := expr.Type.Out(0)
	kret := tret.Kind()
	var cachedfunv r.Value
	var ret I
	switch kret {
	case r.Bool:      {mcall0ret1; bool}
	case r.Int:       {mcall0ret1; int}
	case r.Int8:      {mcall0ret1; int8}
	case r.Int16:     {mcall0ret1; int16}
	case r.Int32:     {mcall0ret1; int32}
	case r.Int64:     {mcall0ret1; int64}
	case r.Uint:      {mcall0ret1; uint}
	case r.Uint8:     {mcall0ret1; uint8}
	case r.Uint16:    {mcall0ret1; uint16}
	case r.Uint32:    {mcall0ret1; uint32}
	case r.Uint64:    {mcall0ret1; uint64}
	case r.Uintptr:   {mcall0ret1; uintptr}
	case r.Float32:   {mcall0ret1; float32}
	case r.Float64:   {mcall0ret1; float64}
	case r.Complex64: {mcall0ret1; complex64}
	case r.Complex128:{mcall0ret1; complex128}
	case r.String:    {mcall0ret1; string}
	default:          {mcall0ret1; nil}
	}
	return ret
}
