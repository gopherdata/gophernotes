/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * var_set.go
 *
 *  Created on Apr 09, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)

:import (
	"go/ast"
	r "reflect"
)

:func fsetplace(depth, typ, expr, exprv ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	upn := Eval(depth).(int)
	var t r.Type = EvalType(typ)

	var loop, env, bind, cbind ast.Node

	if upn >= 0 {
		env = ~'{env}
		for i := 0; i < upn; i++ {
			env = ~"{~,env . Outer}
		}
	} else if upn == -2 {
		env = ~'{env.FileEnv}
	} else if upn == -3 {
		env = ~'{env.FileEnv.Outer}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		env = ~'o
	}

	if t == nil {
		bind = ~"{~,env . Vals[index] .Set(~,exprv)}
	} else {
		typename := &ast.Ident{Name: t.Name()}
		bind = ~"{*(*~,typename)(unsafe.Pointer(& ~,env .Ints[index])) = ~,expr}
		switch t.Kind() {
			case r.Bool:
				cbind = ~"{~,env . Vals[index].SetBool(~,expr)}
			case r.Int, r.Int8, r.Int16, r.Int32:
				cbind = ~"{~,env . Vals[index].SetInt(int64(~,expr))}
			case r.Int64:
				cbind = ~"{~,env . Vals[index].SetInt(~,expr)}
			case r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uintptr:
				cbind = ~"{~,env . Vals[index].SetUint(uint64(~,expr))}
			case r.Uint64:
				bind = ~"{~,env . Ints[index] = ~,expr}
				cbind = ~"{~,env . Vals[index].SetUint(~,expr)}
			case r.Float32:
				cbind = ~"{~,env . Vals[index].SetFloat(float64(~,expr))}
			case r.Float64:
				cbind = ~"{~,env . Vals[index].SetFloat(~,expr)}
			case r.Complex64:
				cbind = ~"{~,env . Vals[index] .SetComplex(complex128(~,expr))}
			case r.Complex128:
				cbind = ~"{~,env . Vals[index] .SetComplex(~,expr)}
			case r.String:
				bind = ~"{~,env . Vals[index] .SetString(~,expr)}
		}
	}

	if cbind == nil {
		return ~"{
			ret = func(env *Env) (Stmt, *Env) {
				~,@loop
				~,bind
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}

	return ~"{
		if intbinds {
			ret = func(env *Env) (Stmt, *Env) {
				~,@loop
				~,bind
				env.IP++
				return env.Code[env.IP], env
			}
		} else {
			ret = func(env *Env) (Stmt, *Env) {
				~,@loop
				~,cbind
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
}

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func convertconst(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		return val
	}

	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro setplace_const(depth, typ ast.Node) ast.Node {
	ret := fsetplace(depth, typ, ~'val, ~'v)
	if EvalType(typ) == nil {
		return ret
	}
	convert := convertconst(typ, ~'v)
	return ~"{
		val := ~,convert
		~,ret
	}
}

:macro setplace_expr(depth, typ ast.Node) ast.Node {
	if EvalType(typ) == nil {
		ret0 := fsetplace(depth, typ, ~'{fun(env)}, ~'{fun(env)})
		ret := fsetplace(depth, typ, ~'{fun(env)}, ~'{conv(fun(env))})
		return ~"{
			fun := e.AsX1() // we need the exact type!
			if conv := c.Converter(e.Type, t); conv == nil {
				~,ret0
			} else {
				~,ret
			}
		}
	}
	ret := fsetplace(depth, typ, ~'{fun(env)}, ~'{fun(env).Convert(rt)})
	return ~"{
		fun := fun.(func(*Env) ~,typ)
		~,ret
	}
}

:macro setplaces_const(depth ast.Node) ast.Node {
	return ~"{
		switch t.Kind() {
		case r.Bool:       setplace_const; ~,depth; bool;
		case r.Int:        setplace_const; ~,depth; int;
		case r.Int8:       setplace_const; ~,depth; int8;
		case r.Int16:      setplace_const; ~,depth; int16;
		case r.Int32:      setplace_const; ~,depth; int32;
		case r.Int64:      setplace_const; ~,depth; int64;
		case r.Uint:       setplace_const; ~,depth; uint;
		case r.Uint8:      setplace_const; ~,depth; uint8;
		case r.Uint16:     setplace_const; ~,depth; uint16;
		case r.Uint32:     setplace_const; ~,depth; uint32;
		case r.Uint64:     setplace_const; ~,depth; uint64;
		case r.Uintptr:    setplace_const; ~,depth; uintptr;
		case r.Float32:    setplace_const; ~,depth; float32;
		case r.Float64:    setplace_const; ~,depth; float64;
		case r.Complex64:  setplace_const; ~,depth; complex64;
		case r.Complex128: setplace_const; ~,depth; complex128;
		case r.String:     setplace_const; ~,depth; string;
		default:           setplace_const; ~,depth; nil;
		}
	}
}

:macro setplaces_expr(depth ast.Node) ast.Node {
	return ~"{
		switch t.Kind() {
		case r.Bool:       setplace_expr; ~,depth; bool;
		case r.Int:        setplace_expr; ~,depth; int;
		case r.Int8:       setplace_expr; ~,depth; int8;
		case r.Int16:      setplace_expr; ~,depth; int16;
		case r.Int32:      setplace_expr; ~,depth; int32;
		case r.Int64:      setplace_expr; ~,depth; int64;
		case r.Uint:       setplace_expr; ~,depth; uint;
		case r.Uint8:      setplace_expr; ~,depth; uint8;
		case r.Uint16:     setplace_expr; ~,depth; uint16;
		case r.Uint32:     setplace_expr; ~,depth; uint32;
		case r.Uint64:     setplace_expr; ~,depth; uint64;
		case r.Uintptr:    setplace_expr; ~,depth; uintptr;
		case r.Float32:    setplace_expr; ~,depth; float32;
		case r.Float64:    setplace_expr; ~,depth; float64;
		case r.Complex64:  setplace_expr; ~,depth; complex64;
		case r.Complex128: setplace_expr; ~,depth; complex128;
		case r.String:     setplace_expr; ~,depth; string;
		default:           setplace_expr; ~,depth; nil;
		}
	}
}

// varSetZero compiles 'variable = 0'
func (c *Comp) varSetZero(va *Var) {
	zero := xr.Zero(va.Type).Interface()
	c.varSetConst(va, zero)
}

// varSetConst compiles 'name = constant'
func (c *Comp) varSetConst(va *Var, val I) {
	t := va.Type
	upn := va.Upn
	index := va.Desc.Index()

	v := r.ValueOf(val)
	rt := t.ReflectType()
	if ValueType(v) == nil {
		v = r.Zero(rt)
	} else {
		v = v.Convert(rt)
	}
	var ret func(env *Env) (Stmt, *Env)
	intbinds := va.Desc.Class() == IntBind
	switch upn {
	case 0:         setplaces_const;  0
	case 1:         setplaces_const;  1
	case 2:         setplaces_const;  2
	default:        setplaces_const; -1
	case c.Depth-1: setplaces_const; -2
	}
	c.append(ret)
}

// varSetExpr compiles 'name = expression'
func (c *Comp) varSetExpr(va *Var, e *Expr) {
	t := va.Type
	upn := va.Upn
	index := va.Desc.Index()

	fun := e.Fun
	var ret func(env *Env) (Stmt, *Env)
	intbinds := va.Desc.Class() == IntBind
	switch upn {
	case 0:         setplaces_expr;  0
	case 1:         setplaces_expr;  1
	case 2:         setplaces_expr;  2
	default:        setplaces_expr; -1
	case c.Depth-1: setplaces_expr; -2
	}
	c.append(ret)
}
