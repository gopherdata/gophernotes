/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * callnret0.go
 *
 *  Created on Apr 15, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	. "github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)

	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}

:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

func (c *Comp) call0ret0(call *Call, maxdepth int) func(env *Env) {
	expr := call.Fun
	funsym := expr.Sym
	if funsym == nil {
		exprfun := expr.AsX1()
		return func(env *Env) {
			fun := exprfun(env).Interface().(func())
			fun()
		}
	}

	var cachedfunv r.Value
	var cachedfun func()

	funupn := funsym.Upn
	funindex := funsym.Desc.Index()
	switch funupn {
	case maxdepth - 1:
		return func(env *Env) {
			funv := env.FileEnv.Vals[funindex]
			if cachedfunv != funv {
				cachedfunv = funv
				cachedfun = funv.Interface().(func())
			}
			cachedfun()
		}
	case 0:
		return func(env *Env) {
			fun := env.Vals[funindex].Interface().(func())
			fun()
		}
	case 1:
		return func(env *Env) {
			fun := env.Outer.Vals[funindex].Interface().(func())
			fun()
		}
	case 2:
		return func(env *Env) {
			fun := env.Outer.Outer.Vals[funindex].Interface().(func())
			fun()
		}
	default:
		return func(env *Env) {
			env = env.Outer.Outer.Outer.Outer
			for i := 3; i < funupn; i++ {
				env = env.Outer
			}
			fun := env.Vals[funindex].Interface().(func())
			fun()
		}
	}
}

:macro mcall1ret0(argtyp ast.Node) ast.Node {

	if EvalType(argtyp) == nil {
		return ~"{
			ret = func(env *Env) {
				funv := exprfun(env)
				// keep the argument wrapped in a reflect.Value
				argv := []r.Value{
					argfun(env),
				}
				funv.Call(argv)
			}
		}
	}

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfunv = funv
			cachedfun = funv.Interface().(func(~,argtyp))
		}
	}

	argconv := convertvalue1(argtyp, ~'{r.ValueOf(arg.Value)})

	return ~"{
		if arg.Const() {
			argconst := ~,argconv
			if funsym != nil && funupn == maxdepth - 1 {
				var cachedfun func(~,argtyp)
				ret = func(env *Env) {
					funv := env.FileEnv.Vals[funindex]
					~,cachefun
					// Debugf("calling %v with args [%v]", r.TypeOf(cachedfun), argconst)
					cachedfun(argconst)
				}
			} else {
				ret = func(env *Env) {
					fun := exprfun(env).Interface().(func(~,argtyp))
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), argconst)
					fun(argconst)
				}
			}
		} else {
			argfun := arg.Fun.(func(env *Env) ~,argtyp)
			if funsym != nil && funupn == maxdepth - 1 {
				var cachedfun func(~,argtyp)
				ret = func(env *Env) {
					funv := env.FileEnv.Vals[funindex]
					~,cachefun
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(cachedfun), arg)
					cachedfun(arg)
				}
			} else {
				ret = func(env *Env) {
					fun := exprfun(env).Interface().(func(~,argtyp))
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					fun(arg)
				}
			}
		}
	}
}



func (c *Comp) call1ret0(call *Call, maxdepth int) func(env *Env) {
	expr := call.Fun
	exprfun := expr.AsX1()
	funsym := expr.Sym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
		if funindex == NoIndex {
			Errorf("internal error: call1ret0() invoked for constant function %#v. use call_builtin() instead", expr)
		}
	}
	arg := call.Args[0]
	argfun := call.MakeArgfunsX1()[0]

	var cachedfunv r.Value
	var ret func(env *Env)

	t := expr.Type.In(0)
	k := t.Kind()
	if KindToType(k) == t.ReflectType() {
		switch k {
		case r.Bool:      {mcall1ret0; bool}
		case r.Int:       {mcall1ret0; int}
		case r.Int8:      {mcall1ret0; int8}
		case r.Int16:     {mcall1ret0; int16}
		case r.Int32:     {mcall1ret0; int32}
		case r.Int64:     {mcall1ret0; int64}
		case r.Uint:      {mcall1ret0; uint}
		case r.Uint8:     {mcall1ret0; uint8}
		case r.Uint16:    {mcall1ret0; uint16}
		case r.Uint32:    {mcall1ret0; uint32}
		case r.Uint64:    {mcall1ret0; uint64}
		case r.Uintptr:   {mcall1ret0; uintptr}
		case r.Float32:   {mcall1ret0; float32}
		case r.Float64:   {mcall1ret0; float64}
		case r.Complex64: {mcall1ret0; complex64}
		case r.Complex128:{mcall1ret0; complex128}
		case r.String:    {mcall1ret0; string}
		}
	}
	if ret == nil {
		{mcall1ret0; nil}
	}
	return ret
}

:macro mcall2ret0(arg0typ, arg1typ ast.Node) ast.Node {

	if EvalType(arg0typ) == nil || EvalType(arg1typ) == nil {
		return ~"{
			ret = func(env *Env) {
				funv := exprfun(env)
				// keep the arguments wrapped in a reflect.Value
				argv := []r.Value{
					argfuns[0](env),
					argfuns[1](env),
				}
				funv.Call(argv)
			}
		}
	}

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfunv = funv
			cachedfun = funv.Interface().(func(~,arg0typ, ~,arg1typ))
		}
	}

	return ~"{
		arg0fun := args[0].WithFun().(func(*Env) ~,arg0typ)
		arg1fun := args[1].WithFun().(func(*Env) ~,arg0typ)

		if funsym != nil && funupn == maxdepth - 1 {
			var cachedfun func(~,arg0typ, ~,arg1typ)
			ret = func(env *Env) {
				funv := env.FileEnv.Vals[funindex]
				~,cachefun
				arg0 := arg0fun(env)
				arg1 := arg1fun(env)
				cachedfun(arg0, arg1)
			}
		} else {
			ret = func(env *Env) {
				fun := exprfun(env).Interface().(func(~,arg0typ, ~,arg1typ))
				arg0 := arg0fun(env)
				arg1 := arg1fun(env)
				fun(arg0, arg1)
			}
		}
	}
}


func (c *Comp) call2ret0(call *Call, maxdepth int) func(env *Env) {
	expr := call.Fun
	exprfun := expr.AsX1()
	funsym := expr.Sym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
		if funindex == NoIndex {
			Errorf("internal error: call2ret0() invoked for constant function %#v. use call_builtin() instead", expr)
		}
	}
	args := call.Args
	argfunsX1 := call.MakeArgfunsX1()
	argfuns := [2]func(*Env)r.Value {
		argfunsX1[0],
		argfunsX1[1],
	}
	var cachedfunv r.Value
	var ret func(env *Env)

	t := expr.Type.In(0)
	rt := t.ReflectType()
	k := t.Kind()
	if KindToType(k) == rt && expr.Type.In(1).ReflectType() == rt {
		switch k {
		case r.Bool:      {mcall2ret0; bool;       bool}
		case r.Int:       {mcall2ret0; int;        int}
		case r.Int8:      {mcall2ret0; int8;       int8}
		case r.Int16:     {mcall2ret0; int16;      int16}
		case r.Int32:     {mcall2ret0; int32;      int32}
		case r.Int64:     {mcall2ret0; int64;      int64}
		case r.Uint:      {mcall2ret0; uint;       uint}
		case r.Uint8:     {mcall2ret0; uint8;      uint8}
		case r.Uint16:    {mcall2ret0; uint16;     uint16}
		case r.Uint32:    {mcall2ret0; uint32;     uint32}
		case r.Uint64:    {mcall2ret0; uint64;     uint64}
		case r.Uintptr:   {mcall2ret0; uintptr;    uintptr}
		case r.Float32:   {mcall2ret0; float32;    float32}
		case r.Float64:   {mcall2ret0; float64;    float64}
		case r.Complex64: {mcall2ret0; complex64;  complex64}
		case r.Complex128:{mcall2ret0; complex128; complex128}
		case r.String:    {mcall2ret0; string;     string}
		}
	}
	if ret == nil {
		{mcall2ret0; nil; nil}
	}
	return ret
}
