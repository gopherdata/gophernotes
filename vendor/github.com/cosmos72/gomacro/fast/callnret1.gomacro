/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * callnret1.go
 *
 *  Created on Apr 20, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
)

:import (
	"go/ast"
	"go/token"
	r "reflect"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func convertret0(typ ast.Node) (ast.Node, ast.Node) {
	var t r.Type = EvalType(typ)
	var ret0 ast.Node = ~'{ret0} // set type ast.Node: classic interpreter is too clever and deduces *ast.Ident
	if t == nil {
		// keep the result wrapped in a reflect.Value
		typ = ~'{r.Value}
	} else {
		// unwrap the result
		tname := t.Name()
		// remove final digits from t.Name()
		// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
		for len(tname) != 0 {
			ch := tname[len(tname)-1]
			if ch < '0' || ch > '9' {
				break
			}
			tname = tname[0:len(tname)-1]
		}
		if tname == "uintptr" {
			tname = "uint" // use reflect.Value.Uint()
		}
		sel := ~"{~,ret0 . foo} // we modify it destructively
		sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

		switch t.Kind() {
		case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
			// result of reflect.Value.{tname} is already the correct type
			ret0 = ~"{~,sel ()}
		default:
			// convert int64, uint64... to the correct type
			ret0 = ~"{~,typ ( ~,sel () )}
		}
	}
	return typ, ret0
}

:macro mcallnret1(rettyp ast.Node) ast.Node {
	var ret0 ast.Node
	rettyp, ret0 = convertret0(rettyp)

	return ~"{
		ret = func(env *Env) ~,rettyp {
			funv := exprfun(env)
			argv := make([]r.Value, len(argfuns))
			for i, argfun := range argfuns {
				argv[i] = argfun(env)
			}
			// Debugf("calling %v with args %v", funv.Type(), argv)
			ret0 := funv.Call(argv)[0]
			return ~,ret0
		}
	}
}

func (c *Comp) callnret1(call *Call, maxdepth int) I {
	expr := call.Fun
	exprfun := expr.AsX1()
	if expr.Sym != nil && expr.Sym.Desc.Index() == NoIndex {
		c.Errorf("internal error: callnret1() invoked for constant function %#v. use call_builtin() instead", expr)
	}
	kret := expr.Type.Out(0).Kind()
	argfuns := call.MakeArgfunsX1()
	var ret I
	switch kret {
	case r.Bool:      {mcallnret1; bool}
	case r.Int:       {mcallnret1; int}
	case r.Int8:      {mcallnret1; int8}
	case r.Int16:     {mcallnret1; int16}
	case r.Int32:     {mcallnret1; int32}
	case r.Int64:     {mcallnret1; int64}
	case r.Uint:      {mcallnret1; uint}
	case r.Uint8:     {mcallnret1; uint8}
	case r.Uint16:    {mcallnret1; uint16}
	case r.Uint32:    {mcallnret1; uint32}
	case r.Uint64:    {mcallnret1; uint64}
	case r.Uintptr:   {mcallnret1; uintptr}
	case r.Float32:   {mcallnret1; float32}
	case r.Float64:   {mcallnret1; float64}
	case r.Complex64: {mcallnret1; complex64}
	case r.Complex128:{mcallnret1; complex128}
	case r.String:    {mcallnret1; string}
	default:          {mcallnret1; nil}
	}
	return ret
}
