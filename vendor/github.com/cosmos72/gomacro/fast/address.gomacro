/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * address.go
 *
 *  Created on Apr 05, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/ast"
	r "reflect"
	"unsafe"

	"github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)

:import (
	"go/ast"
	r "reflect"
)

:const (
	// conventional values
	AnyDepth  = -1
	FileDepth = -2
	TopDepth  = -3
)

:func faddress(upn int, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	var decls, addresstaken, bind, rettype ast.Node

	if upn == 0 {
		decls = ~'{{ }}
	} else if upn > 0 {
		decls = ~'env
		for i := 0; i < upn; i++ {
			decls = ~"{~,decls. Outer}
		}
		decls = ~"{{
			env = ~,decls
		}}
	} else if upn == FileDepth {
		decls = ~'{{env = env.FileEnv}}
	} else if upn == TopDepth {
		decls = ~'{{env = env.FileEnv.Outer}}
	} else {
		decls = ~'{
			env = env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				env = env.Outer
			}
		}
	}
	if t == nil {
		// env.Vals[index] actually contains the variable's address
		// no need to set special flags like env.IntAddressTaken.
		// that's needed instead when taking the address of env.Ints[index]
		bind = ~'{env .Vals[index].Addr()}
		rettype = ~'{r.Value}
		return ~"{
			ret = func(env *Env) (~,rettype) {
				~,@decls
				return ~,bind
			}
		}
	}

	addresstaken = ~"{{env.IntAddressTaken = true}}
	rettype = ~"{* ~,typ}
	if t.Kind() == r.Uint64 {
		bind = ~'{&env.Ints[index]}
	} else {
		bind = ~"{(*~,typ)(unsafe.Pointer(&env.Ints[index]))}
	}

	return ~"{
		if intbinds {
			ret = func(env *Env) (~,rettype) {
				~,@decls
				~,addresstaken
				return ~,bind
			}
		} else {
			ret = func(env *Env) (~,rettype) {
				~,@decls
				return env.Vals[index].Addr().Interface().(~,rettype)
			}
		}
	}
}

:macro address(depth ast.Node, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var upn int = Eval(depth).(int)

	return faddress(upn, typ)
}

:macro addresses(depth ast.Node) ast.Node {
	return ~"{
		switch k {
		case r.Bool:       address; ~,depth; bool
		case r.Int:        address; ~,depth; int
		case r.Int8:       address; ~,depth; int8
		case r.Int16:      address; ~,depth; int16
		case r.Int32:      address; ~,depth; int32
		case r.Int64:      address; ~,depth; int64
		case r.Uint:       address; ~,depth; uint
		case r.Uint8:      address; ~,depth; uint8
		case r.Uint16:     address; ~,depth; uint16
		case r.Uint32:     address; ~,depth; uint32
		case r.Uint64:     address; ~,depth; uint64
		case r.Uintptr:    address; ~,depth; uintptr
		case r.Float32:    address; ~,depth; float32
		case r.Float64:    address; ~,depth; float64
		case r.Complex64:  address; ~,depth; complex64
		case r.Complex128: address; ~,depth; complex128
		default:           address; ~,depth; nil
		}
	}
}

func (c *Comp) AddressOf(node *ast.UnaryExpr) *Expr {
	return c.addressOf(node.X, nil)
}

func (c *Comp) addressOf(expr ast.Expr, t xr.Type) *Expr {
	for {
		switch e := expr.(type) {
		case *ast.ParenExpr:
			expr = e.X
			continue
		case *ast.StarExpr:
			// optimize & * x -> x, but check that x is a pointer
			if t != nil {
				t = t.Elem()
			}
			ret := c.Expr1(e.X, t)
			if ret.Type.Kind() != r.Ptr {
				c.Errorf("unary operation * on non-pointer <%v>: %v", ret.Type, e)
			}
		}
		break
	}
	place := c.placeOrAddress(expr, PlaceAddress, t)
	// c.Debugf("AddressOf: place %v has type %v, taking its address", expr, place.Type)
	if place.IsVar() {
		va := place.Var // make a copy of place.Var, do not alter the original's type
		return va.Address(c.Depth)
	} else if place.Addr == nil {
		c.Errorf("cannot take the address of %v <%v>", expr, place.Type)
		return nil
	} else {
		// placeOrAddress returns the dereferenced type... fix it
		t := c.Universe.PtrTo(place.Type)
		return exprX1(t, place.Addr)
	}
}

func (c *Comp) AddressOfVar(name string) *Expr {
	sym := c.Resolve(name)
	va := sym.AsVar(PlaceAddress)
	return va.Address(c.Depth)
}

func (va *Var) Address(maxdepth int) *Expr {
	upn := va.Upn
	k := va.Type.Kind()
	index := va.Desc.Index()
	if index == NoIndex {
		base.Errorf("cannot take the address of %s: _", va.Desc.Class())
		return nil
	}
	var ret I
	intbinds := va.Desc.Class() == IntBind
	switch upn {
	case 0:          addresses;  0
	case 1:          addresses;  1
	case 2:          addresses;  2
	default:         addresses; -1
	case maxdepth-1: addresses; -2
	case maxdepth:   addresses; -3
	}
	u := va.Type.Universe()
	return &Expr{Lit: Lit{Type: u.PtrTo(va.Type)}, Fun: ret}
}
