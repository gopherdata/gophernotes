/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * var_shifts.go
 *
 *  Created on May 17, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/token"
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	"fmt"
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)
	if t == nil {
		return nil
	}
	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}


:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:func op_to_assign(op token.Token) token.Token {
	switch op {
	case token.ADD:
		op = token.ADD_ASSIGN
	case token.SUB:
		op = token.SUB_ASSIGN
	case token.MUL:
		op = token.MUL_ASSIGN
	case token.QUO:
		op = token.QUO_ASSIGN
	case token.REM:
		op = token.REM_ASSIGN
	case token.AND:
		op = token.AND_ASSIGN
	case token.OR:
		op = token.OR_ASSIGN
	case token.XOR:
		op = token.XOR_ASSIGN
	case token.SHL:
		op = token.SHL_ASSIGN
	case token.SHR:
		op = token.SHR_ASSIGN
	case token.AND_NOT:
		op = token.AND_NOT_ASSIGN
	default:
		panic(fmt.Sprintf("cannot convert token %s to assignment token", op))
	}
	return op
}

:func fgetplace(depth, typ ast.Node) (/*loop*/ *ast.BlockStmt, /*env*/ ast.Node) {
	// the return type of Eval() and EvalType() varies. better check early.
	upn := Eval(depth).(int)
	var t r.Type = EvalType(typ)
	var env ast.Node
	var loop *ast.BlockStmt

	if upn >= 0 {
		env = ~'{env}
		for i := 0; i < upn; i++ {
			env = ~"{~,env . Outer}
		}
	} else if upn == -2 {
		env = ~'{env.FileEnv}
	} else if upn == -3 {
		env = ~'{env.FileEnv.Outer}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		env = ~'o
	}
	return loop, env
}

:func fsetplace(opnode, depth, typ, expr, exprv ast.Node) ast.Node {
	loop, env := fgetplace(depth, typ)
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	op := Eval(opnode).(token.Token)
	opset := op_to_assign(op)
	var bind, cbind ast.Node

	var assign *ast.AssignStmt = ~"{*(*~,typ)(unsafe.Pointer(& ~,env .Ints[index])) += ~,expr}
	assign.Tok = opset
	bind = assign

	switch t.Kind() {
		case r.Int, r.Int8, r.Int16, r.Int32, r.Int64:
			var result *ast.BinaryExpr = ~"{lhs.Int() + ~,expr}
			result.Op = op
			cbind = ~"{lhs := ~,env . Vals[index]; lhs.SetInt(~,result)}
		case r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uint64, r.Uintptr:
			var result *ast.BinaryExpr = ~"{lhs.Uint() + ~,expr}
			result.Op = op
			cbind = ~"{lhs := ~,env . Vals[index]; lhs.SetUint(~,result)}
			if t.Kind() == r.Uint64 {
				var assign *ast.AssignStmt = ~"{~,env . Ints[index] += ~,expr}
				assign.Tok = opset
				bind = assign
			}
		case r.Float32, r.Float64:
			var result *ast.BinaryExpr = ~"{lhs.Float() + ~,expr}
			result.Op = op
			cbind = ~"{lhs := ~,env . Vals[index]; lhs.SetFloat(~,result)}
		case r.Complex64, r.Complex128:
			var result *ast.BinaryExpr = ~"{lhs.Complex() + ~,expr}
			result.Op = op
			cbind = ~"{lhs := ~,env . Vals[index]; lhs.SetComplex(~,result)}
		case r.String:
			var result *ast.BinaryExpr = ~"{lhs.String() + ~,expr}
			result.Op = op
			bind = ~"{lhs := ~,env . Vals[index]; lhs.SetString(~,result)}
	}

	if cbind == nil {
		return ~"{
			ret = func(env *Env) (Stmt, *Env) {
				~,@loop
				~,bind
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}

	return ~"{
		if intbinds {
			ret = func(env *Env) (Stmt, *Env) {
				~,@loop
				~,bind
				env.IP++
				return env.Code[env.IP], env
			}
		} else {
			ret = func(env *Env) (Stmt, *Env) {
				~,@loop
				~,cbind
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
}

:macro setplace_const(opnode, depth, typ ast.Node) ast.Node {
	return fsetplace(opnode, depth, typ, ~'val, ~'v)
}

:macro setplace_expr(opnode, depth, typ ast.Node) ast.Node {
	return fsetplace(opnode, depth, typ, ~'{fun(env)}, ~'{fun(env).Convert(t)})
}

:macro setplace_depth_const(opnode, typ ast.Node) ast.Node {
	return ~"{
		switch upn {
			case 0:         setplace_const; ~,opnode; 0; ~,typ
			case 1:         setplace_const; ~,opnode; 1; ~,typ
			case 2:         setplace_const; ~,opnode; 2; ~,typ
			case c.Depth-1: setplace_const; ~,opnode;-2; ~,typ
			default:        setplace_const; ~,opnode;-1; ~,typ
		}
	}
}

:macro setplace_depth_expr(opnode, typ ast.Node) ast.Node {
	return ~"{
		switch upn {
			case 0:         setplace_expr; ~,opnode; 0; ~,typ
			case 1:         setplace_expr; ~,opnode; 1; ~,typ
			case 2:         setplace_expr; ~,opnode; 2; ~,typ
			case c.Depth-1: setplace_expr; ~,opnode;-2; ~,typ
			default:        setplace_expr; ~,opnode;-1; ~,typ
		}
	}
}

:func list_types(typelist []ast.Stmt) []ast.Node {
	rets := make([]ast.Node, 0, len(typelist))
	for _, typ := range typelist {
		t := EvalType(typ)
		if t == nil {
			rets = append(rets, ~'nil)
		} else if t.Kind() == r.Int {
			rets = append(rets, ~'int, ~'int8, ~'int16, ~'int32, ~'int64)
		} else if t.Kind() == r.Uint {
			rets = append(rets, ~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr)
		} else if t.Kind() == r.Float64 {
			rets = append(rets, ~'float32, ~'float64)
		} else if t.Kind() == r.Complex128 {
			rets = append(rets, ~'complex64, ~'complex128)
		} else {
			rets = append(rets, typ)
		}
	}
	return rets
}

:macro setplaces_depth_const(opnode, types ast.Node) ast.Node {
	typelist := list_types(types.(*ast.BlockStmt).List)
	caselist := make([]ast.Stmt, len(typelist))
	for i, typ := range typelist {
		if EvalType(typ) == nil {
			caselist[i] = ~"{default: c.Errorf(`invalid operator %s= between <%v> and <%v>`, ~,opnode, t, t2)}
		} else {
			kind := makekind(typ)
			caselist[i] = ~"{case ~,kind: setplace_depth_const; ~,opnode; ~,typ}
		}
	}
	return ~"{
		val := r.ValueOf(val).Uint()
		var ret Stmt
		switch t.Kind() {
			~,@caselist
		}
		c.append(ret)
	}
}

:macro setplaces_depth_expr(opnode, types ast.Node) ast.Node {
	typelist := list_types(types.(*ast.BlockStmt).List)
	caselist := make([]ast.Stmt, len(typelist))
	for i, typ := range typelist {
		if EvalType(typ) == nil {
			caselist[i] = ~"{default: c.Errorf(`invalid operator %s= between <%v> and <%v>`, ~,opnode, t, t2)}
		} else {
			kind := makekind(typ)
			caselist[i] = ~"{case ~,kind: setplace_depth_expr; ~,opnode; ~,typ}
		}
	}
	return ~"{
		var ret Stmt
		switch t.Kind() {
			~,@caselist
		}
		c.append(ret)
	}
}

// varShlConst compiles 'variable <<= constant'
func (c *Comp) varShlConst(va *Var, val I) {
	t := va.Type
	upn := va.Upn
	index := va.Desc.Index()
	intbinds := va.Desc.Class() == IntBind

	t2 := r.TypeOf(val)
	if t2 == nil || KindToCategory(t2.Kind()) != r.Uint {
		c.Errorf(`invalid operator %s= between <%v> and <%v>`, token.SHL, t, t2)
	}
	if isLiteralNumber(val, 0) {
		return
	}
	setplaces_depth_const; token.SHL; {int; uint; nil}
}

// varShlExpr compiles 'variable <<= expression'
func (c *Comp) varShlExpr(va *Var, function I) {
	t := va.Type
	upn := va.Upn
	index := va.Desc.Index()
	intbinds := va.Desc.Class() == IntBind

	t2 := funTypeOut(function)
	if t2 == nil || KindToCategory(t2.Kind()) != r.Uint {
		c.Errorf(`invalid operator %s= between <%v> and <%v>`, token.SHL, t, t2)
	}
	fun := asFunUint8(function)
	setplaces_depth_expr; token.SHL; {int; uint; nil}
}

// varShrConst compiles 'variable >>= constant'
func (c *Comp) varShrConst(va *Var, val I) {
	t := va.Type
	upn := va.Upn
	index := va.Desc.Index()
	intbinds := va.Desc.Class() == IntBind

	t2 := r.TypeOf(val)
	if t2 == nil || KindToCategory(t2.Kind()) != r.Uint {
		c.Errorf(`invalid operator %s= between <%v> and <%v>`, token.SHR, t, t2)
	}
	if isLiteralNumber(val, 0) {
		return
	}
	setplaces_depth_const; token.SHR; {int; uint; nil}
}

// varShrExpr compiles 'variable >>= expression'
func (c *Comp) varShrExpr(va *Var, function I) {
	t := va.Type
	upn := va.Upn
	index := va.Desc.Index()
	intbinds := va.Desc.Class() == IntBind

	t2 := funTypeOut(function)
	if t2 == nil || KindToCategory(t2.Kind()) != r.Uint {
		c.Errorf(`invalid operator %s= between <%v> and <%v>`, token.SHR, t, t2)
	}
	fun := asFunUint8(function)
	setplaces_depth_expr; token.SHR; {int; uint; nil}
}

:macro mfun8() ast.Node {
	return ~'{
		return func(env *Env) uint8 {
			val := fun(env)
			if val > 255 {
				val = 255
			}
			return uint8(val)
		}
	}
}

func asFunUint8(fun I) func(*Env) uint8 {
	var f func(*Env) uint8
	switch fun := fun.(type) {
		case func(*Env) uint:
			mfun8
		case func(*Env) uint8:
			f = fun
		case func(*Env) uint16:
			mfun8
		case func(*Env) uint32:
			mfun8
		case func(*Env) uint64:
			mfun8
		case func(*Env) uintptr:
			mfun8
	}
	return f
}

