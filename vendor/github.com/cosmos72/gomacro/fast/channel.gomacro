/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * channel.go
 *
 *  Created on May 01, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

:import (
	"go/ast"
	r "reflect"
)

import (
	"go/ast"
	r "reflect"

	. "github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)
	if t == nil {
		return nil
	}
	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}

:func maketypevar(typ ast.Node) ast.Node {
	t := EvalType(typ)
	sel := &ast.SelectorExpr{
		X: &ast.Ident{Name: "c"},
		Sel: &ast.Ident{Name: "TypeOf" + upcasefirstbyte(t.Name())},
	}
	return ~"{~,sel ()}
}


:func convertvalue(typ, val ast.Node) (ast.Node, ast.Node) {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		typ = ~'{r.Value}
	} else {
		// unwrap the result
		tname := t.Name()
		// remove final digits from t.Name()
		// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
		for len(tname) != 0 {
			ch := tname[len(tname)-1]
			if ch < '0' || ch > '9' {
				break
			}
			tname = tname[0:len(tname)-1]
		}
		if tname == "uintptr" {
			tname = "uint" // use reflect.Value.Uint()
		}
		sel := ~"{~,val . foo} // we modify it destructively
		sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

		switch t.Kind() {
		case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
			// result of reflect.Value.{tname} is already the correct type
			val = ~"{~,sel ()}
		default:
			// convert int64, uint64... to the correct type
			val = ~"{~,typ ( ~,sel () )}
		}
	}
	return typ, val
}

// Recv compiles <-channel (returns two values: the received value and an 'ok' flag)
func (c *Comp) Recv(node *ast.UnaryExpr, xe *Expr) *Expr {
	t := xe.Type
	if t.Kind() != r.Chan {
		return c.badUnaryExpr("expecting channel, found", node, xe)
	}
	if t.ChanDir()&r.RecvDir == 0 {
		return c.badUnaryExpr("cannot receive from send-only channel", node, xe)
	}
	var fun func(env *Env) (r.Value, []r.Value)
	switch x := xe.Fun.(type) {
	case func(env *Env) (r.Value, []r.Value):
		channelfun := x
		fun = func(env *Env) (r.Value, []r.Value) {
			channel, _ := channelfun(env)
			retv, ok := channel.Recv()
			var okv r.Value
			if ok {
				okv = True
			} else {
				okv = False
			}
			return retv, []r.Value{retv, okv}
		}
	default:
		channelfun := xe.AsX1()
		fun = func(env *Env) (r.Value, []r.Value) {
			retv, ok := channelfun(env).Recv()
			var okv r.Value
			if ok {
				okv = True
			} else {
				okv = False
			}
			return retv, []r.Value{retv, okv}
		}
	}
	types := []xr.Type{t.Elem(), c.TypeOfBool()}
	return exprXV(types, fun)
}

:macro recv1_xv(typ ast.Node) ast.Node {
	if EvalType(typ) == nil {
		return ~"{
			default:
			fun = func(env *Env) r.Value {
				channel, _ := channelfun(env)
				retv, _ := channel.Recv()
				return retv
			}
		}
	}
	kind := makekind(typ)
	typ2, ret := convertvalue(typ, ~'retv)
	return ~"{
		case ~,kind:
		fun = func(env *Env) ~,typ2 {
			channel, _ := channelfun(env)
			retv, _ := channel.Recv()
			return ~,ret
		}
	}
}

:macro recv1(typ ast.Node) ast.Node {
	if EvalType(typ) == nil {
		return ~"{
			default:
			fun = func(env *Env) r.Value {
				retv, _ := channelfun(env).Recv()
				return retv
			}
		}
	}
	kind := makekind(typ)
	typ2, ret := convertvalue(typ, ~'retv)
	return ~"{
		case ~,kind:
		if telem.ReflectType() != KindToType(~,kind) {
			fun = func(env *Env) ~,typ {
				retv, _ := channelfun(env).Recv()
				return ~,ret
			}
		} else if recvonly {
			fun = func(env *Env) ~,typ {
				channel := channelfun(env).Interface().(<-chan ~,typ)
				return <-channel
			}
		} else {
			fun = func(env *Env) ~,typ {
				channel := channelfun(env).Interface().(chan ~,typ)
				return <-channel
			}
		}
	}
}

// Recv1 compiles <-channel (returns a single value: the received value)
// mandatory optimization: fast_interpreter ASSUMES that expressions
// returning bool, int, uint, float, complex, string do NOT wrap them in reflect.Value
func (c *Comp) Recv1(node *ast.UnaryExpr, xe *Expr) *Expr {
	t := xe.Type
	if t.Kind() != r.Chan {
		return c.badUnaryExpr("expecting channel, found", node, xe)
	}
	if t.ChanDir()&r.RecvDir == 0 {
		return c.badUnaryExpr("cannot receive from send-only channel", node, xe)
	}
	telem := t.Elem()
	var fun I
	switch x := xe.Fun.(type) {
	case func(env *Env) (r.Value, []r.Value):
		channelfun := x
		switch telem.Kind() {
			{recv1_xv; bool}
			{recv1_xv; int}
			{recv1_xv; int8}
			{recv1_xv; int16}
			{recv1_xv; int32}
			{recv1_xv; int64}
			{recv1_xv; uint}
			{recv1_xv; uint8}
			{recv1_xv; uint16}
			{recv1_xv; uint32}
			{recv1_xv; uint64}
			{recv1_xv; uintptr}
			{recv1_xv; float32}
			{recv1_xv; float64}
			{recv1_xv; complex64}
			{recv1_xv; complex128}
			{recv1_xv; string}
			{recv1_xv; nil}
		}
	default:
		recvonly := t.ChanDir() == r.RecvDir
		channelfun := xe.AsX1()
		switch telem.Kind() {
			{recv1; bool}
			{recv1; int}
			{recv1; int8}
			{recv1; int16}
			{recv1; int32}
			{recv1; int64}
			{recv1; uint}
			{recv1; uint8}
			{recv1; uint16}
			{recv1; uint32}
			{recv1; uint64}
			{recv1; uintptr}
			{recv1; float32}
			{recv1; float64}
			{recv1; complex64}
			{recv1; complex128}
			{recv1; string}
			{recv1; nil}
		}
	}
	return exprFun(telem, fun)
}

:macro send_c(typ ast.Node) ast.Node {
	kind := makekind(typ)
	typ2, conv := convertvalue(typ, ~'v)
	return ~"{
		case ~,kind:
		value := ~,conv
		if sendonly {
			stmt = func(env *Env) (Stmt, *Env) {
				channel := channelfun(env).Interface().(chan<- ~,typ)
				channel <- value
				env.IP++
				return env.Code[env.IP], env
			}
		} else {
			stmt = func(env *Env) (Stmt, *Env) {
				channel := channelfun(env).Interface().(chan ~,typ)
				channel <- value
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
}

:macro send_e(typ ast.Node) ast.Node {
	kind := makekind(typ)
	return ~"{
		case ~,kind:
		if exprfun, ok := expr.Fun.(func (*Env) ~,typ); !ok {
			break
		} else if sendonly {
			stmt = func(env *Env) (Stmt, *Env) {
				channel := channelfun(env).Interface().(chan<- ~,typ)
				channel <- exprfun(env)
				env.IP++
				return env.Code[env.IP], env
			}
		} else {
			stmt = func(env *Env) (Stmt, *Env) {
				channel := channelfun(env).Interface().(chan ~,typ)
				channel <- exprfun(env)
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
}

func (c *Comp) Send(node *ast.SendStmt) {
	channel := c.Expr1(node.Chan, nil)
	t := channel.Type
	if t.Kind() != r.Chan {
		c.Errorf("cannot send to non-channel type %v: %v", t, node)
		return
	}
	if t.ChanDir()&r.SendDir == 0 {
		c.Errorf("cannot send to receive-only channel type %v: %v", t, node)
		return
	}
	telem := t.Elem()
	rtelem := telem.ReflectType()
	kelem := rtelem.Kind()
	expr := c.Expr1(node.Value, nil)
	if expr.Const() {
		expr.ConstTo(telem)
	} else if expr.Type == nil || !expr.Type.AssignableTo(telem) {
		c.Errorf("cannot use %v <%v> as type %v in send", node.Value, expr.Type, telem)
		return
	} else {
		expr.To(c, telem)
	}
	channelfun := channel.AsX1()
	sendonly := t.ChanDir() == r.SendDir
	var stmt Stmt
	if expr.Const() {
		v := r.ValueOf(expr.Value)
		if KindToType(kelem) == rtelem {
			switch kelem {
			{send_c; bool}
			{send_c; int}
			{send_c; int8}
			{send_c; int16}
			{send_c; int32}
			{send_c; int64}
			{send_c; uint}
			{send_c; uint8}
			{send_c; uint16}
			{send_c; uint32}
			{send_c; uint64}
			{send_c; uintptr}
			{send_c; float32}
			{send_c; float64}
			{send_c; complex64}
			{send_c; complex128}
			{send_c; string}
			}
		}
		if stmt == nil {
			stmt = func(env *Env) (Stmt, *Env) {
				channel := channelfun(env)
				channel.Send(v)
				env.IP++
				return env.Code[env.IP], env
			}
		}
	} else {
		if KindToType(kelem) == rtelem {
			switch kelem {
			{send_e; bool}
			{send_e; int}
			{send_e; int8}
			{send_e; int16}
			{send_e; int32}
			{send_e; int64}
			{send_e; uint}
			{send_e; uint8}
			{send_e; uint16}
			{send_e; uint32}
			{send_e; uint64}
			{send_e; uintptr}
			{send_e; float32}
			{send_e; float64}
			{send_e; complex64}
			{send_e; complex128}
			{send_e; string}
			}
		}
		if stmt == nil {
			exprfun := expr.AsX1()
			stmt = func(env *Env) (Stmt, *Env) {
				channel := channelfun(env)
				value := exprfun(env)
				channel.Send(value)
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
	c.append(stmt)
}
