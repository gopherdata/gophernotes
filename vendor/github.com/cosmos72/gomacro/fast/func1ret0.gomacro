/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * func1ret0.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)

:import (
	r "reflect"
	"go/ast"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

// convert a well-known reflect.Type into one of the constants TypeOf*
:func maketypeident(t r.Type) *ast.Ident {
	name := "TypeOf" + upcasefirstbyte(t.Name())
	return &ast.Ident{Name: name}
}

:func fsetarg(typ, tident, name, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	if t == nil {
		bind = ~"{
			place := r.New(~,tident).Elem()
			place.Set(r.ValueOf(~,name))
			env.Vals[~,index] = place
		}
	} else {
		typeident := maketypeident(t)
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{
					place := r.New(~,typeident).Elem()
					place.SetComplex(~,name)
					env.Vals[~,index] = place
				}
			case r.String:
				bind = ~"{
					place := r.New(~,typeident).Elem()
					place.SetString(~,name)
					env.Vals[~,index] = place
				}
			case r.Uint64:
				bind = ~"{env.Ints[~,index] = ~,name}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(&env.Ints[~,index])) = ~,name}
		}
	}
	return bind
}

// fully optimized function declaration
:macro mfunc1ret0(arg0typ ast.Node) ast.Node {
	var t r.Type = EvalType(arg0typ)
	if t != nil {
		arg0bind := fsetarg(arg0typ, ~'targ0, ~'arg0, ~'param0index)
		return ~"{
			if funcbody == nil {
				funv := r.ValueOf(func(~,arg0typ) {})
				return func(env *Env) r.Value {
					return funv
				}
			}
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return r.ValueOf(func(arg0 ~,arg0typ) {
					env := newEnv4Func(env, nbind, nintbind, debugC)
					// copy arg0 into allocated binds
					~,arg0bind
					// execute the body
					funcbody(env)

					env.freeEnv4Func()
				})
			}
		}
	}
	// not a well-known type... use reflect.MakeFunc()
	return ~"{
		rtype := t.ReflectType()
		if funcbody == nil {
			funv := r.MakeFunc(rtype, func([]r.Value) []r.Value {
					return nil
			})
			return func(env *Env) r.Value {
				return funv
			}
		} else {
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				rtarg0 := targ0.ReflectType()
				return r.MakeFunc(rtype, func(args []r.Value) []r.Value {
					env := newEnv4Func(env, nbind, nintbind, debugC)

					// copy arg0 into allocated binds
					if param0index != NoIndex {
						place := r.New(rtarg0).Elem()
						if arg0 := args[0]; arg0 != Nil && arg0 != None {
							place.Set(arg0.Convert(rtarg0))
						}
						env.Vals[param0index] = place
					}
					// execute the body
					funcbody(env)

					return ZeroValues
				})
			}
		}
	}
}

func (c *Comp) func1ret0(t xr.Type, m *funcMaker) func(*Env) r.Value {
	// do NOT keep a reference to funcMaker
	nbind := m.nbind
	nintbind := m.nintbind
	funcbody := m.funcbody
	param0index := m.Param[0].Desc.Index()

	var debugC *Comp
	if c.Globals.Options&OptDebugger != 0 {
		// keep a reference to c only if needed
		debugC = c
	}
	targ0 := t.In(0)
	karg0 := targ0.Kind()
	switch karg0 {
	case r.Bool:      {mfunc1ret0; bool}
	case r.Int:       {mfunc1ret0; int}
	case r.Int8:      {mfunc1ret0; int8}
	case r.Int16:     {mfunc1ret0; int16}
	case r.Int32:     {mfunc1ret0; int32}
	case r.Int64:     {mfunc1ret0; int64}
	case r.Uint:      {mfunc1ret0; uint}
	case r.Uint8:     {mfunc1ret0; uint8}
	case r.Uint16:    {mfunc1ret0; uint16}
	case r.Uint32:    {mfunc1ret0; uint32}
	case r.Uint64:    {mfunc1ret0; uint64}
	case r.Uintptr:   {mfunc1ret0; uintptr}
	case r.Float32:   {mfunc1ret0; float32}
	case r.Float64:   {mfunc1ret0; float64}
	case r.Complex64: {mfunc1ret0; complex64}
	case r.Complex128:{mfunc1ret0; complex128}
	case r.String:    {mfunc1ret0; string}
	default:          {mfunc1ret0; nil}
	}
}
