/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * func_ret1.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)

:import (
	r "reflect"
	"go/ast"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makeprefixtypeident(prefix string, t r.Type) *ast.Ident {
	name := prefix + upcasefirstbyte(t.Name())
	return &ast.Ident{Name: name}
}

// convert a well-known reflect.Type into one of the constants TypeOf*
:func maketypeident(t r.Type) *ast.Ident {
	return makeprefixtypeident("TypeOf", t)
}

:macro mcallfunc1retx1(typ ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	ident := makeprefixtypeident("func1ret1", t)
	return ~"{
		ret = ~,ident (m, indexes, kret0, debugC)
	}
}

:macro mcallfuncx1retx1(dummy ast.Node) ast.Node {
	return ~"{
		switch karg0 {
		case r.Bool:      {mcallfunc1retx1; bool}
		case r.Int:       {mcallfunc1retx1; int}
		case r.Int8:      {mcallfunc1retx1; int8}
		case r.Int16:     {mcallfunc1retx1; int16}
		case r.Int32:     {mcallfunc1retx1; int32}
		case r.Int64:     {mcallfunc1retx1; int64}
		case r.Uint:      {mcallfunc1retx1; uint}
		case r.Uint8:     {mcallfunc1retx1; uint8}
		case r.Uint16:    {mcallfunc1retx1; uint16}
		case r.Uint32:    {mcallfunc1retx1; uint32}
		case r.Uint64:    {mcallfunc1retx1; uint64}
		case r.Uintptr:   {mcallfunc1retx1; uintptr}
		case r.Float32:   {mcallfunc1retx1; float32}
		case r.Float64:   {mcallfunc1retx1; float64}
		case r.Complex64: {mcallfunc1retx1; complex64}
		case r.Complex128:{mcallfunc1retx1; complex128}
		case r.String:    {mcallfunc1retx1; string}
		}
	}
}

// ==================================== func1ret1 ========================================

func (c *Comp) func1ret1(t xr.Type, m *funcMaker) func(*Env) r.Value {
	var debugC *Comp
	if c.Globals.Options&OptDebugger != 0 {
		// keep a reference to c only if needed
		debugC = c
	}
	karg0 := t.In(0).Kind()
	kret0 := t.Out(0).Kind()

	indexes := &[2]int{
		m.Param[0].Desc.Index(),
		m.Result[0].Desc.Index(),
	}
	var ret func(*Env) r.Value

	// if IsOptimizedKind(karg0) && IsOptimizedKind(kret0)
	mcallfuncx1retx1; nil

	return ret
}

// ==================================== func1ret1{Bool,Int,...} ========================================

:func fsetarg(typ, name, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	typeident := maketypeident(t)
	switch t.Kind() {
		case r.String:
			bind = ~"{
				place := r.New(~,typeident).Elem()
				place.SetString(~,name)
				env.Vals[~,index] = place
			}
		case r.Uint64:
			bind = ~"{env.Ints[~,index] = ~,name}
		default:
			bind = ~"{*(*~,typ)(unsafe.Pointer(&env.Ints[~,index])) = ~,name}
	}
	return bind
}

:func fgetresult(typ, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	if t == nil {
		bind = ~"{env.Vals[~,index]}
	} else {
		typeident := maketypeident(t)
		switch t.Kind() {
			case r.String:
				bind = ~"{env.Vals[~,index].String()}
			case r.Uint64:
				bind = ~"{env.Ints[~,index]}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(&env.Ints[~,index]))}
		}
	}
	return bind
}

// ----------------- func(t0) t1 ---------------------

// generate fully optimized function implementation for func(arg0typ) ret0typ
:macro mfunc1ret1(arg0typ, ret0typ ast.Node) ast.Node {
	arg0bind := fsetarg(arg0typ, ~'arg0, ~'{indexes[0]})
	ret0bind := fgetresult(ret0typ, ~'{indexes[1]})
	return ~"{
		if funcbody == nil {
			funv := r.ValueOf(func(~,arg0typ) (ret0 ~,ret0typ) {
				return
			})
			ret = func(env *Env) r.Value {
				return funv
			}
			break
		}
		ret = func(env *Env) r.Value {
			// function is closed over the env used to DECLARE it
			env.MarkUsedByClosure()
			return r.ValueOf(func(arg0 ~,arg0typ) (ret0 ~,ret0typ) {
				env := newEnv4Func(env, nbind, nintbind, debugC)

				// copy arg into allocated binds
				~,arg0bind

				// execute the body
				funcbody(env)

				// extract result
				ret0 = ~,ret0bind
				env.freeEnv4Func()
				return
			})
		}
	}
}

:macro mfunc1retx1(arg0typ ast.Node) ast.Node {
	return ~"{
		switch kret0 {
		case r.Bool:      {mfunc1ret1; ~,arg0typ; bool}
		case r.Int:       {mfunc1ret1; ~,arg0typ; int}
		case r.Int8:      {mfunc1ret1; ~,arg0typ; int8}
		case r.Int16:     {mfunc1ret1; ~,arg0typ; int16}
		case r.Int32:     {mfunc1ret1; ~,arg0typ; int32}
		case r.Int64:     {mfunc1ret1; ~,arg0typ; int64}
		case r.Uint:      {mfunc1ret1; ~,arg0typ; uint}
		case r.Uint8:     {mfunc1ret1; ~,arg0typ; uint8}
		case r.Uint16:    {mfunc1ret1; ~,arg0typ; uint16}
		case r.Uint32:    {mfunc1ret1; ~,arg0typ; uint32}
		case r.Uint64:    {mfunc1ret1; ~,arg0typ; uint64}
		case r.Uintptr:   {mfunc1ret1; ~,arg0typ; uintptr}
		case r.Float32:   {mfunc1ret1; ~,arg0typ; float32}
		case r.Float64:   {mfunc1ret1; ~,arg0typ; float64}
		case r.Complex64: {mfunc1ret1; ~,arg0typ; complex64}
		case r.Complex128:{mfunc1ret1; ~,arg0typ; complex128}
		case r.String:    {mfunc1ret1; ~,arg0typ; string}
		}
	}
}

:macro mdeclfunc1retx1(arg0typ ast.Node) ast.Node {
	decl := ~"{
		~func foo (m *funcMaker, indexes *[2]int, kret0 r.Kind, debugC *Comp) func(*Env) r.Value {
			// do NOT keep a reference to funcMaker
			nbind := m.nbind
			nintbind := m.nintbind
			funcbody := m.funcbody
			var ret func(*Env) r.Value

			mfunc1retx1; ~,arg0typ

			return ret
		}
	}
	var t r.Type = EvalType(arg0typ)
	decl.Name = makeprefixtypeident("func1ret1", t)
	return decl
}

mdeclfunc1retx1; bool
mdeclfunc1retx1; int
mdeclfunc1retx1; int8
mdeclfunc1retx1; int16
mdeclfunc1retx1; int32
mdeclfunc1retx1; int64
mdeclfunc1retx1; uint
mdeclfunc1retx1; uint8
mdeclfunc1retx1; uint16
mdeclfunc1retx1; uint32
mdeclfunc1retx1; uint64
mdeclfunc1retx1; uintptr
mdeclfunc1retx1; float32
mdeclfunc1retx1; float64
mdeclfunc1retx1; complex64
mdeclfunc1retx1; complex128
mdeclfunc1retx1; string
