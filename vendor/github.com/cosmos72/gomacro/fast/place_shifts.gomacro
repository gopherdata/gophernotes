/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * place_shifts.go
 *
 *  Created on May 17, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/token"
	r "reflect"

	. "github.com/cosmos72/gomacro/base"
)


:import (
	"fmt"
	"go/ast"
	"go/token"
	r "reflect"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makeupcase(node ast.Node, name string) ast.Node {
	// go/ast.SelectorExpr requires the foo in x.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{~,node . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(name)}
	return kind
}

:func makekind(typ ast.Node) ast.Node {
	name := EvalType(typ).Name()
	return makeupcase(~'r, name)
}

:func fsetplace(opnode, typ, expr, roundup ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	var get, set ast.Node
	var shift *ast.BinaryExpr = ~"{result >> ~,expr}
	op := Eval(opnode).(token.Token)
	shift.Op = op
	signed := false

	switch t.Kind() {
		case r.Int, r.Int8, r.Int16, r.Int32, r.Int64:
			get = ~"{lhs.Int()}
			set = ~"{lhs.SetInt(~,shift)}
			signed = true
		case r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uint64, r.Uintptr:
			get = ~"{lhs.Uint()}
			set = ~"{lhs.SetUint(~,shift)}
		default:
			panic("invalid operator " + op.String() + "= on " + t.String())
	}

	if signed && Eval(roundup) == true {
		return ~"{
			// used to optimize division by constant-power-of-two
			ret = func(env *Env) (Stmt, *Env) {
				lhs := lhsfun(env)
				result := ~,get
				if result < 0 {
					result += roundup
				}
				~,set
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			lhs := lhsfun(env)
			result := ~,get
			~,set
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:func fsetmap(opnode, typ, expr, option ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	var get ast.Node
	var shift *ast.BinaryExpr = ~"{result >> ~,expr}
	op := Eval(opnode).(token.Token)
	shift.Op = op
	signed := false

	switch t.Kind() {
		case r.Int, r.Int8, r.Int16, r.Int32, r.Int64:
			get = ~"{lhs.MapIndex(key).Int()}
			signed = true
		case r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uint64, r.Uintptr:
			get = ~"{lhs.MapIndex(key).Uint()}
		default:
			panic("invalid operator " + op.String() + "= on " + t.String())
	}

	var opt interface{} = Eval(option)
	if signed && opt == true {
		return ~"{
			// used to optimize division by constant-power-of-two
			ret = func(env *Env) (Stmt, *Env) {
				lhs := lhsfun(env)
				key := keyfun(env)
				result := ~,get
				if result < 0 {
					result += roundup
				}
				v := r.ValueOf(~,shift)
				if v.Type() != rt {
					v = v.Convert(rt)
				}
				lhs.SetMapIndex(key, v)
				env.IP++
				return env.Code[env.IP], env
			}
		}
	} else {
		return ~"{
			ret = func(env *Env) (Stmt, *Env) {
				lhs := lhsfun(env)
				key := keyfun(env)
				result := ~,get
				v := r.ValueOf(~,shift)
				if v.Type() != rt {
					v = v.Convert(rt)
				}
				lhs.SetMapIndex(key, v)
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
}

:macro setplace_const(opnode, typ, option ast.Node) ast.Node {
	return fsetplace(opnode, typ, ~'val, option)
}

:macro setplace_expr(opnode, typ ast.Node) ast.Node {
	return fsetplace(opnode, typ, ~'{fun(env)}, nil)
}

:macro setmap_const(opnode, typ, option ast.Node) ast.Node {
	return fsetmap(opnode, typ, ~'val, option)
}

:macro setmap_expr(opnode, typ ast.Node) ast.Node {
	return fsetmap(opnode, typ, ~'{fun(env)}, ~'0)
}


:func list_types(typelist []ast.Stmt) []ast.Node {
	rets := make([]ast.Node, 0, len(typelist))
	for _, typ := range typelist {
		t := EvalType(typ)
		if t == nil {
			rets = append(rets, ~'nil)
		} else if t.Kind() == r.Int {
			rets = append(rets, ~'int, ~'int8, ~'int16, ~'int32, ~'int64)
		} else if t.Kind() == r.Uint {
			rets = append(rets, ~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr)
		} else if t.Kind() == r.Float64 {
			rets = append(rets, ~'float32, ~'float64)
		} else if t.Kind() == r.Complex128 {
			rets = append(rets, ~'complex64, ~'complex128)
		} else {
			rets = append(rets, typ)
		}
	}
	return rets
}

:macro setplaces_const(opnode, types, roundup ast.Node) ast.Node {
	// separate cases for int8, uint16... not needed
	typelist := types.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, len(typelist))
	mapcaselist := make([]ast.Stmt, len(typelist))
	for i, typ := range typelist {
		kind := makekind(typ)
		caselist[i] = ~"{case ~,kind:
			setplace_const; ~,opnode; ~,typ; ~,roundup
		}
		mapcaselist[i] = ~"{case ~,kind:
			setmap_const; ~,opnode; ~,typ; ~,roundup
		}
	}
	var conv ast.Node
	var isroundup interface{} = Eval(roundup)
	if isroundup == true {
		conv = ~'shift
		opnode = ~'{token.QUO} // for error messages
	} else {
		conv = ~'{r.ValueOf(val).Uint()}
	}

	return ~"{
		var ret Stmt
		lhsfun := place.Fun
		keyfun := place.MapKey
		val := ~,conv

		t := place.Type
		rt := t.ReflectType()
		cat := KindToCategory(t.Kind())
		if keyfun == nil {
			switch cat {
				~,@caselist
			}
		} else {
			switch cat {
				~,@mapcaselist
			}
		}
		if ret == nil {
			c.Errorf("invalid operator %s= on <%v>", ~,opnode, place.Type)
		}
		c.append(ret)
	}
}

:macro setplaces_expr(opnode, ltyp, rtypes ast.Node) ast.Node {
	rtypelist := list_types(rtypes.(*ast.BlockStmt).List)

	caselist := make([]ast.Stmt, len(rtypelist))
	for i, rtyp := range rtypelist {
		caselist[i] = ~"{~typecase func(*Env) ~,rtyp:
			setplace_expr; ~,opnode; ~,ltyp
		}
	}
	return ~"{
		switch fun := fun.(type) {
			~,@caselist
		}
	}
}

:macro setmaps_expr(opnode, ltyp, rtypes ast.Node) ast.Node {
	rtypelist := list_types(rtypes.(*ast.BlockStmt).List)

	caselist := make([]ast.Stmt, len(rtypelist))
	for i, rtyp := range rtypelist {
		caselist[i] = ~"{~typecase func(*Env) ~,rtyp:
			setmap_expr; ~,opnode; ~,ltyp
		}
	}
	return ~"{
		switch fun := fun.(type) {
			~,@caselist
		}
	}
}

:macro setplacess_expr(opnode, ltypes, rtypes ast.Node) ast.Node {
	ltypelist := ltypes.(*ast.BlockStmt).List

	caselist := make([]ast.Stmt, len(ltypelist))
	mapcaselist := make([]ast.Stmt, len(ltypelist))
	for i, ltyp := range ltypelist {
		kind := makekind(ltyp)
		caselist[i] = ~"{case ~,kind:
			setplaces_expr; ~,opnode; ~,ltyp; ~,rtypes
		}
		mapcaselist[i] = ~"{case ~,kind:
			setmaps_expr; ~,opnode; ~,ltyp; ~,rtypes
		}
	}
	return ~"{
		var ret Stmt
		lhsfun := place.Fun
		keyfun := place.MapKey
		t := place.Type
		rt := t.ReflectType()
		cat := KindToCategory(t.Kind())
		if keyfun == nil {
			switch cat {
				~,@caselist
			}
		} else {
			switch cat {
				~,@mapcaselist
			}
		}
		if ret == nil {
			c.Errorf("invalid operator %s= on <%v>", ~,opnode, place.Type)
		}
		c.append(ret)
	}
}

// placeShlConst compiles 'place <<= constant'
func (c *Comp) placeShlConst(place *Place, val I) {
	if isLiteralNumber(val, 0) {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.SHL; {int; uint}; false
}

// placeShlExpr compiles 'place <<= expression'
func (c *Comp) placeShlExpr(place *Place, fun I) {
	setplacess_expr; token.SHL; {int; uint}; {uint}
}

// placeShrConst compiles 'place >>= constant'
func (c *Comp) placeShrConst(place *Place, val I) {
	if isLiteralNumber(val, 0) {
		c.placeForSideEffects(place)
		return
	}
	setplaces_const; token.SHR; {int; uint}; false
}

// placeShrExpr compiles 'place >>= expression'
func (c *Comp) placeShrExpr(place *Place, fun I) {
	setplacess_expr; token.SHR; {int; uint}; {uint}
}

// placeQuoPow2 compiles 'place /= constant-power-of-two'
func (c *Comp) placeQuoPow2(place *Place, val I) bool {
	if isLiteralNumber(val, 0) {
		c.Errorf("division by %v <%v>", val, r.TypeOf(val))
		return false
	} else if isLiteralNumber(val, 1) {
		c.placeForSideEffects(place)
		return true // nothing to do
	}

	ypositive := true
	yv := r.ValueOf(val)
	ycat := KindToCategory(yv.Kind())
	var y uint64
	switch ycat {
	case r.Int:
		sy := yv.Int()
		if sy < 0 {
			ypositive = false
			y = uint64(-sy)
		} else {
			y = uint64(sy)
		}
	case r.Uint:
		y = yv.Uint()
	default:
		// floating point or complex division
		return false
	}
	if !isPowerOfTwo(y) {
		// division by multiplication and shift not implemented...
		return false
	}
	// attention: xe / (2**n) and xe >> n have different truncation rules for negative xe:
	//    quotient / truncates toward zero
	//    right shift >> truncates toward negative infinity
	// see quoPow2() in binary_ops.go for more details
	shift := integerLen(y) - 1

	if !ypositive {
		return false // not yet implemented
	}

	var roundup int64
	if ycat == r.Int {
		// fix rounding mode
		roundup = int64(y-1)
	}
	setplaces_const; token.SHR; {int; uint}; true

	return true
}

