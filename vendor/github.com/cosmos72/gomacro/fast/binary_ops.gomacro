/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2018 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * binary_ops.go
 *
 *  Created on Apr 12, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	"go/ast"
	"go/token"
	r "reflect"

	"github.com/cosmos72/gomacro/base"
	xr "github.com/cosmos72/gomacro/xreflect"
)

:import (
	"fmt"
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)

	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}

:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro binaryop(opnode, xconst, yconst, typ ast.Node) ast.Node {

	// the return type of Eval() and EvalType() varies. better check early.
	xc, yc := Eval(xconst).(bool), Eval(yconst).(bool)
	optoken := Eval(opnode).(token.Token)

	if xc == yc {
		var expr *ast.BinaryExpr = ~"{x(env) && y(env)} // quasiquote, we modify it destructively
		expr.Op = optoken

		return ~"{
			x := x.(func(*Env) ~,typ)
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) ~,typ {
				return ~,expr
			}
		}
	} else if yc {
		var expr *ast.BinaryExpr = ~"{x(env) && y} // quasiquote, we modify it destructively
		expr.Op = optoken

		converty := convertvalue1(typ, ~'{r.ValueOf(y)})
		return ~"{
			x := x.(func(*Env) ~,typ)
			y := ~,converty
			fun = func(env *Env) ~,typ {
				return ~,expr
			}
		}
	} else {
		var expr *ast.BinaryExpr = ~"{x && y(env)} // quasiquote, we modify it destructively
		expr.Op = optoken

		convertx := convertvalue1(typ, ~'{r.ValueOf(x)})
		return ~"{
			x := ~,convertx
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) ~,typ {
				return ~,expr
			}
		}
	}
}

:macro binaryops(opnode, xconst, yconst, types ast.Node) ast.Node {
	typelist := types.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, 0, len(typelist))
	foundnil := false
	for _, typ := range typelist {
		t := EvalType(typ)
		if t == nil {
			caselist = append(caselist, ~"{default: binaryop; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			foundnil = true

		} else if t.Kind() == r.Int {
			// shortcut for all int* types
			for _, typ := range []ast.Expr{~'int, ~'int8, ~'int16, ~'int32, ~'int64} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: binaryop; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			}
		} else if t.Kind() == r.Uint {
			// shortcut for all uint* types
			for _, typ := range []ast.Expr{~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: binaryop; ~,opnode; ~,xconst; ~,yconst; ~,typ})
			}
		} else {
			kind := makekind(typ)
			caselist = append(caselist, ~"{case ~,kind: binaryop; ~,opnode; ~,xconst; ~,yconst; ~,typ})
		}
	}

	if !foundnil {
		caselist = append(caselist, ~'{default: return c.invalidBinaryExpr(node, xe, ye)})
	}
	return ~"{ switch k { ~,@caselist } }
}

func (c *Comp) Add(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.ADD; false; false; { int; uint; float32; float64; complex64; complex128; string }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, 0) || y == "" {
			return xe
		}
		{binaryops; token.ADD; false; true; { int; uint; float32; float64; complex64; complex128; string }}
	} else {
		x := xe.Value
		y := ye.Fun
		if isLiteralNumber(x, 0) || x == "" {
			return ye
		}
		{binaryops; token.ADD; true; false; { int; uint; float32; float64; complex64; complex128; string }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Sub(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.SUB; false; false; { int; uint; float32; float64; complex64; complex128 }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, 0) {
			return xe
		}
		{binaryops; token.SUB; false; true; { int; uint; float32; float64; complex64; complex128 }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops; token.SUB; true; false; { int; uint; float32; float64; complex64; complex128 }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Mul(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.MUL; false; false; { int; uint; float32; float64; complex64; complex128 }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if ze := c.mulPow2(node, xe, ye); ze != nil {
			return ze
		}
		{binaryops; token.MUL; false; true; { int; uint; float32; float64; complex64; complex128 }}
	} else {
		x := xe.Value
		y := ye.Fun
		if ze := c.mulPow2(node, xe, ye); ze != nil {
			return ze
		}
		{binaryops; token.MUL; true; false; { int; uint; float32; float64; complex64; complex128 }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Quo(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.QUO; false; false; { int; uint; float32; float64; complex64; complex128 }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, 0) {
			c.Errorf("division by zero")
			return nil
		} else if ze := c.quoPow2(node, xe, ye); ze != nil {
			return ze
		}
		{binaryops; token.QUO; false; true; { int; uint; float32; float64; complex64; complex128 }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops; token.QUO; true; false; { int; uint; float32; float64; complex64; complex128 }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Rem(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.REM; false; false; { int; uint }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		// cannot optimize x % 1 to 0 because x may have side effects
		if isLiteralNumber(y, 0) {
			c.Errorf("division by zero")
			return nil
		} else if ze := c.remPow2(node, xe, ye); ze != nil {
			return ze
		}
		{binaryops; token.REM; false; true; { int; uint }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops; token.REM; true; false; { int; uint }}
	}
	return exprFun(xe.Type, fun)
}

:macro mulpow2(typ ast.Node) ast.Node {
	return ~"{
		x := x.(func(*Env) ~,typ)
		if ypositive {
			switch shift {
			case 1:
				fun = func(env *Env) ~,typ {
					return x(env) << 1
				}
			case 2:
				fun = func(env *Env) ~,typ {
					return x(env) << 2
				}
			case 8:
				fun = func(env *Env) ~,typ {
					return x(env) << 8
				}
			default:
				fun = func(env *Env) ~,typ {
					return x(env) << shift
				}
			}
		} else {
			fun = func(env *Env) ~,typ {
				return -(x(env) << shift)
			}
		}
	}
}

:macro mulpow2_u(typ ast.Node) ast.Node {
	return ~"{
		x := x.(func(*Env) ~,typ)
		switch shift {
		case 1:
			fun = func(env *Env) ~,typ {
				return x(env) << 1
			}
		case 2:
			fun = func(env *Env) ~,typ {
				return x(env) << 2
			}
		case 8:
			fun = func(env *Env) ~,typ {
				return x(env) << 8
			}
		default:
			fun = func(env *Env) ~,typ {
				return x(env) << shift
			}
		}
	}
}

// mulPow2 tries to optimize multiplications by a constant power-of-two.
// returns nil if no optimized version could be compiled.
func (c *Comp) mulPow2(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	// no need to optimize if both xe and ye are constant:
	// multiplication will be computed only once by EvalConst()
	if xe.Const() == ye.Const() {
		return nil
	}
	if xe.Const() {
		// swap xe and ye. no side effects, xe is a constant
		xe, ye = ye, xe
	}
	if isLiteralNumber(ye.Value, 0) {
		return c.exprZero(xe)
	} else if isLiteralNumber(ye.Value, 1) {
		return xe
	} else if isLiteralNumber(ye.Value, -1) {
		node1 := &ast.UnaryExpr{OpPos: node.OpPos, Op: token.SUB, X: node.X}
		return c.UnaryMinus(node1, xe)
	}
	ypositive := true
	yv := r.ValueOf(ye.Value)
	var y uint64
	switch base.KindToCategory(yv.Kind()) {
	case r.Int:
		sy := yv.Int()
		if sy < 0 {
			ypositive = false
			y = uint64(-sy)
		} else {
			y = uint64(sy)
		}
	case r.Uint:
		y = yv.Uint()
	default:
		// floating point or complex multiplication
		return nil
	}
	if !isPowerOfTwo(y) {
		// multiplication by shift and add not implemented...
		return nil
	}
	shift := integerLen(y) - 1
	x := xe.Fun
	var fun I
	switch xe.Type.Kind() {
	case r.Int:     {mulpow2; int}
	case r.Int8:    {mulpow2; int8}
	case r.Int16:   {mulpow2; int16}
	case r.Int32:   {mulpow2; int32}
	case r.Int64:   {mulpow2; int64}
	case r.Uint:    {mulpow2_u; uint}
	case r.Uint8:   {mulpow2_u; uint8}
	case r.Uint16:  {mulpow2_u; uint16}
	case r.Uint32:  {mulpow2_u; uint32}
	case r.Uint64:  {mulpow2_u; uint64}
	case r.Uintptr: {mulpow2_u; uintptr}
	default:        return nil
	}
	return exprFun(xe.Type, fun)
}

:macro quopow2(typ ast.Node) ast.Node {
	return ~"{
		x := x.(func(*Env) ~,typ)
		y_1 := ~,typ(y - 1) // cannot overflow, y was originally a ~,typ
		if ypositive {
			fun = func(env *Env) ~,typ {
				n := x(env)
				if n < 0 {
					n += y_1
				}
				return n >> shift
			}
		} else {
			fun = func(env *Env) ~,typ {
				n := x(env)
				if n < 0 {
					n += y_1
				}
				return -(n >> shift)
			}
		}
	}
}

:macro quopow2_u(typ ast.Node) ast.Node {
	return ~"{
		x := x.(func(*Env) ~,typ)
		fun = func(env *Env) ~,typ {
			return x(env) >> shift
		}
	}
}

// quoPow2 tries to optimize divisions by a constant power-of-two.
// returns nil if no optimized version could be compiled.
func (c *Comp) quoPow2(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	// no need to optimize if both xe and ye are constant:
	// division will be computed only once by EvalConst()
	if xe.Const() || !ye.Const() {
		return nil
	}
	if isLiteralNumber(ye.Value, 0) {
		c.Errorf("division by zero")
		return nil
	} else if isLiteralNumber(ye.Value, 1) {
		return xe
	} else if isLiteralNumber(ye.Value, -1) {
		node1 := &ast.UnaryExpr{OpPos: node.OpPos, Op: token.SUB, X: node.X}
		return c.UnaryMinus(node1, xe)
	}
	ypositive := true
	yv := r.ValueOf(ye.Value)
	var y uint64
	switch base.KindToCategory(yv.Kind()) {
	case r.Int:
		sy := yv.Int()
		if sy < 0 {
			ypositive = false
			y = uint64(-sy)
		} else {
			y = uint64(sy)
		}
	case r.Uint:
		y = yv.Uint()
	default:
		// floating point or complex division
		return nil
	}
	if !isPowerOfTwo(y) {
		// division by multiplication and shift not implemented...
		return nil
	}
	// attention: xe / (2**n) and xe >> n have different truncation rules for negative xe:
	//    quotient / truncates toward zero
	//    right shift >> truncates toward negative infinity
	// examples:
	//  11 /  2 =  5,  11 >> 1 =  5 // same result
	// -11 /  2 = -5, -11 >> 1 = -6 // different result
	//  63 /  8 =  7,  63 >> 3 =  7 // same result
	// -63 /  8 = -7, -63 >> 3 = -8 // different result
    //
	// -11 / -2 =  5, -(-11 >> 1) = 6 // different result
	// -63 / -8 =  7, -(-63 >> 3) = 8 // different result
	//
	// to fix this, when xe is negative we must add abs(y)-1 to it:
	// -11 / 2 = -5, (-11 + 1) >> 1 = -10 >> 1 = -5 // same result
	// -63 / 8 = -7, (-63 + 7) >> 3 = -56 >> 3 = -7 // same result
    //
	// -11 / -2 =  5, -((-11 + 1) >> 1) = -(-10 >> 1) = 5 // same result
	// -63 / -8 =  7, -((-63 + 7) >> 3) = -(-56 >> 3) = 7 // same result

	shift := integerLen(y) - 1
	x := xe.Fun
	var fun I
	switch xe.Type.Kind() {
	case r.Int:     {quopow2; int}
	case r.Int8:    {quopow2; int8}
	case r.Int16:   {quopow2; int16}
	case r.Int32:   {quopow2; int32}
	case r.Int64:   {quopow2; int64}
	case r.Uint:    {quopow2_u; uint}
	case r.Uint8:   {quopow2_u; uint8}
	case r.Uint16:  {quopow2_u; uint16}
	case r.Uint32:  {quopow2_u; uint32}
	case r.Uint64:  {quopow2_u; uint64}
	case r.Uintptr: {quopow2_u; uintptr}
	default:        return nil
	}
	return exprFun(xe.Type, fun)
}

:macro rempow2(typ ast.Node) ast.Node {
	return ~"{
		x := x.(func(*Env) ~,typ)
		y_1 := ~,typ(y - 1) // cannot overflow, y was originally a ~,typ
		fun = func(env *Env) ~,typ {
			n := x(env)
			if n >= 0 {
				return n & y_1
			}
			return -(-n & y_1)
		}
	}
}

:macro rempow2_u(typ ast.Node) ast.Node {
	return ~"{
		x := x.(func(*Env) ~,typ)
		y_1 := ~,typ(y - 1) // cannot overflow, y was originally a ~,typ
		fun = func(env *Env) ~,typ {
			return x(env) & y_1
		}
	}
}

// remPow2 tries to optimize remainders by a constant power-of-two.
// returns nil if no optimized version could be compiled.
func (c *Comp) remPow2(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	// no need to optimize if both xe and ye are constant:
	// remainder will be computed only once by EvalConst()
	if xe.Const() || !ye.Const() {
		return nil
	}
	if isLiteralNumber(ye.Value, 0) {
		c.Errorf("division by zero")
		return nil
	} else if isLiteralNumber(ye.Value, 1) {
		return c.exprZero(xe)
	}
	yv := r.ValueOf(ye.Value)
	var y uint64
	switch base.KindToCategory(yv.Kind()) {
	case r.Int:
		sy := yv.Int()
		if sy < 0 {
			y = uint64(-sy)
		} else {
			y = uint64(sy)
		}
	case r.Uint:
		y = yv.Uint()
	default:
		// floating point or complex division
		return nil
	}
	if !isPowerOfTwo(y) {
		// remainder by multiplication and shift not implemented...
		return nil
	}
	// attention: % (2**n) and & (2**n - 1) have different behaviours for negative xe:
	//    remainder % has the same sign as xe
	//    bitwise-and & is always >= 0 (for non-negative right operand)
	// luckily, in Go x % y and x % -y always give the same result, so we can assume y >= 0
	// examples:
	//  11 %  2 =  1,  11 &  1 =  1 // same result
	// -11 %  2 = -1, -11 &  1 =  1 // different result
	// -11 % -2 = -1, -11 &  1 =  1 // different result
	//  63 %  8 =  7,  63 &  7 =  7 // same result
	// -63 %  8 = -7, -63 &  7 =  1 // different result
	// -63 % -8 = -7, -63 &  7 =  1 // different result
	//
	// to fix this, when xe is negative, we flip its sign, perform the bitwise-and with (abs(y)-1), then flip again the sign:
	// -11 %  2 = -1, -(11 & 1) = -1 // same result
	// -11 % -2 = -1, -(11 & 1) = -1 // same result
	// -63 %  8 = -7, -(63 & 7) = -7 // same result
	// -63 % -8 = -7, -(63 & 7) = -7 // same result

	x := xe.Fun
	var fun I
	switch xe.Type.Kind() {
	case r.Int:     {rempow2; int}
	case r.Int8:    {rempow2; int8}
	case r.Int16:   {rempow2; int16}
	case r.Int32:   {rempow2; int32}
	case r.Int64:   {rempow2; int64}
	case r.Uint:    {rempow2_u; uint}
	case r.Uint8:   {rempow2_u; uint8}
	case r.Uint16:  {rempow2_u; uint16}
	case r.Uint32:  {rempow2_u; uint32}
	case r.Uint64:  {rempow2_u; uint64}
	case r.Uintptr: {rempow2_u; uintptr}
	default:        return nil
	}
	return exprFun(xe.Type, fun)
}

func isPowerOfTwo(n uint64) bool {
	return n != 0 && (n&(n-1)) == 0
}

// integerLen returns the number of bits needed to represent n
func integerLen(n uint64) uint8 {
	var l uint8
	for n > 0xff {
		l += 8
		n >>= 8
	}
	for n != 0 {
		l++
		n >>= 1
	}
	return l
}

func (c *Comp) And(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.AND; false; false; { int; uint }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, 0) {
			return c.exprZero(xe)
		} else if isLiteralNumber(y, -1) {
			return xe
		}
		{binaryops; token.AND; false; true; { int; uint }}
	} else {
		x := xe.Value
		y := ye.Fun
		if isLiteralNumber(x, 0) {
			return c.exprZero(ye)
		} else if isLiteralNumber(x, -1) {
			return ye
		}
		{binaryops; token.AND; true; false; { int; uint }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Or(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.OR; false; false; { int; uint }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		// cannot optimize x | -1 to -1 because x may have side effects
		if isLiteralNumber(y, 0) {
			return xe
		}
		{binaryops; token.OR; false; true; { int; uint }}
	} else {
		x := xe.Value
		y := ye.Fun
		// cannot optimize -1 & y to -1 because x may have side effects
		if isLiteralNumber(x, 0) {
			return ye
		}
		{binaryops; token.OR; true; false; { int; uint }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Xor(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.XOR; false; false; { int; uint }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, 0) {
			return xe
		}
		{binaryops; token.XOR; false; true; { int; uint }}
	} else {
		x := xe.Value
		y := ye.Fun
		if isLiteralNumber(x, 0) {
			return ye
		}
		{binaryops; token.XOR; true; false; { int; uint }}
	}
	return exprFun(xe.Type, fun)
}

func (c *Comp) Andnot(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops; token.AND_NOT; false; false; { int; uint }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, -1) {
			return c.exprZero(xe)
		} else if isLiteralNumber(y, 0) {
			return xe
		}
		{binaryops; token.AND_NOT; false; true; { int; uint }}
	} else {
		x := xe.Value
		y := ye.Fun
		if isLiteralNumber(x, 0) {
			return c.exprZero(ye)
		}
		{binaryops; token.AND_NOT; true; false; { int; uint }}
	}
	return exprFun(xe.Type, fun)
}

:macro exprzero(typ ast.Node) ast.Node {
	if EvalType(typ) == nil {
		return ~"{
			zero := xr.Zero(t)
			x := funAsX1(x, nil)
			fun = func(env *Env) r.Value {
				x(env)
				return zero
			}
		}
	}
	return ~"{
		x := x.(func(*Env) ~,typ)
		fun = func(env *Env) (zero ~,typ) {
			x(env)
			return
		}
	}
}

:macro exprzeros(types ast.Node) ast.Node {
	typelist := types.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, 0, len(typelist))
	foundnil := false
	for _, typ := range typelist {
		t := EvalType(typ)
		if t == nil {
			continue
		} else if t.Kind() == r.Int {
			// shortcut for all int* types
			for _, typ := range []ast.Expr{~'int, ~'int8, ~'int16, ~'int32, ~'int64} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: exprzero; ~,typ})
			}
		} else if t.Kind() == r.Uint {
			// shortcut for all uint* types
			for _, typ := range []ast.Expr{~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: exprzero; ~,typ})
			}
		} else {
			kind := makekind(typ)
			caselist = append(caselist, ~"{case ~,kind: exprzero; ~,typ})
		}
	}

	caselist = append(caselist, ~"{default: exprzero; nil})

	return ~"{ switch k { ~,@caselist } }
}

// exprZero compiles a function that evaluates xe,
// then discards the result and always returns zero
func (c *Comp) exprZero(xe *Expr) *Expr {
	if xe.Const() {
		xe.ConstTo(xe.DefaultType())
		return c.exprValue(xe.Type, xr.Zero(xe.Type).Interface())
	}
	t := xe.Type
	k := t.Kind()
	x := xe.Fun
	var fun I
	{exprzeros; {bool; int; uint; float32; float64; complex64; complex128; string} }
	return exprFun(t, fun)
}
