// this file was generated by gomacro command: import _b "bytes"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"bytes"
)

// reflection: allow interpreted code to import "bytes"
func init() {
	Packages["bytes"] = Package{
	Binds: map[string]Value{
		"Compare":	ValueOf(bytes.Compare),
		"Contains":	ValueOf(bytes.Contains),
		"ContainsAny":	ValueOf(bytes.ContainsAny),
		"ContainsRune":	ValueOf(bytes.ContainsRune),
		"Count":	ValueOf(bytes.Count),
		"Equal":	ValueOf(bytes.Equal),
		"EqualFold":	ValueOf(bytes.EqualFold),
		"ErrTooLarge":	ValueOf(&bytes.ErrTooLarge).Elem(),
		"Fields":	ValueOf(bytes.Fields),
		"FieldsFunc":	ValueOf(bytes.FieldsFunc),
		"HasPrefix":	ValueOf(bytes.HasPrefix),
		"HasSuffix":	ValueOf(bytes.HasSuffix),
		"Index":	ValueOf(bytes.Index),
		"IndexAny":	ValueOf(bytes.IndexAny),
		"IndexByte":	ValueOf(bytes.IndexByte),
		"IndexFunc":	ValueOf(bytes.IndexFunc),
		"IndexRune":	ValueOf(bytes.IndexRune),
		"Join":	ValueOf(bytes.Join),
		"LastIndex":	ValueOf(bytes.LastIndex),
		"LastIndexAny":	ValueOf(bytes.LastIndexAny),
		"LastIndexByte":	ValueOf(bytes.LastIndexByte),
		"LastIndexFunc":	ValueOf(bytes.LastIndexFunc),
		"Map":	ValueOf(bytes.Map),
		"MinRead":	ValueOf(bytes.MinRead),
		"NewBuffer":	ValueOf(bytes.NewBuffer),
		"NewBufferString":	ValueOf(bytes.NewBufferString),
		"NewReader":	ValueOf(bytes.NewReader),
		"Repeat":	ValueOf(bytes.Repeat),
		"Replace":	ValueOf(bytes.Replace),
		"Runes":	ValueOf(bytes.Runes),
		"Split":	ValueOf(bytes.Split),
		"SplitAfter":	ValueOf(bytes.SplitAfter),
		"SplitAfterN":	ValueOf(bytes.SplitAfterN),
		"SplitN":	ValueOf(bytes.SplitN),
		"Title":	ValueOf(bytes.Title),
		"ToLower":	ValueOf(bytes.ToLower),
		"ToLowerSpecial":	ValueOf(bytes.ToLowerSpecial),
		"ToTitle":	ValueOf(bytes.ToTitle),
		"ToTitleSpecial":	ValueOf(bytes.ToTitleSpecial),
		"ToUpper":	ValueOf(bytes.ToUpper),
		"ToUpperSpecial":	ValueOf(bytes.ToUpperSpecial),
		"Trim":	ValueOf(bytes.Trim),
		"TrimFunc":	ValueOf(bytes.TrimFunc),
		"TrimLeft":	ValueOf(bytes.TrimLeft),
		"TrimLeftFunc":	ValueOf(bytes.TrimLeftFunc),
		"TrimPrefix":	ValueOf(bytes.TrimPrefix),
		"TrimRight":	ValueOf(bytes.TrimRight),
		"TrimRightFunc":	ValueOf(bytes.TrimRightFunc),
		"TrimSpace":	ValueOf(bytes.TrimSpace),
		"TrimSuffix":	ValueOf(bytes.TrimSuffix),
	}, Types: map[string]Type{
		"Buffer":	TypeOf((*bytes.Buffer)(nil)).Elem(),
		"Reader":	TypeOf((*bytes.Reader)(nil)).Elem(),
	}, Untypeds: map[string]string{
		"MinRead":	"int:512",
	}, 
	}
}
