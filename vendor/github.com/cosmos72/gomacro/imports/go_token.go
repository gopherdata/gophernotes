// this file was generated by gomacro command: import _b "go/token"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"go/token"
)

// reflection: allow interpreted code to import "go/token"
func init() {
	Packages["go/token"] = Package{
	Binds: map[string]Value{
		"ADD":	ValueOf(token.ADD),
		"ADD_ASSIGN":	ValueOf(token.ADD_ASSIGN),
		"AND":	ValueOf(token.AND),
		"AND_ASSIGN":	ValueOf(token.AND_ASSIGN),
		"AND_NOT":	ValueOf(token.AND_NOT),
		"AND_NOT_ASSIGN":	ValueOf(token.AND_NOT_ASSIGN),
		"ARROW":	ValueOf(token.ARROW),
		"ASSIGN":	ValueOf(token.ASSIGN),
		"BREAK":	ValueOf(token.BREAK),
		"CASE":	ValueOf(token.CASE),
		"CHAN":	ValueOf(token.CHAN),
		"CHAR":	ValueOf(token.CHAR),
		"COLON":	ValueOf(token.COLON),
		"COMMA":	ValueOf(token.COMMA),
		"COMMENT":	ValueOf(token.COMMENT),
		"CONST":	ValueOf(token.CONST),
		"CONTINUE":	ValueOf(token.CONTINUE),
		"DEC":	ValueOf(token.DEC),
		"DEFAULT":	ValueOf(token.DEFAULT),
		"DEFER":	ValueOf(token.DEFER),
		"DEFINE":	ValueOf(token.DEFINE),
		"ELLIPSIS":	ValueOf(token.ELLIPSIS),
		"ELSE":	ValueOf(token.ELSE),
		"EOF":	ValueOf(token.EOF),
		"EQL":	ValueOf(token.EQL),
		"FALLTHROUGH":	ValueOf(token.FALLTHROUGH),
		"FLOAT":	ValueOf(token.FLOAT),
		"FOR":	ValueOf(token.FOR),
		"FUNC":	ValueOf(token.FUNC),
		"GEQ":	ValueOf(token.GEQ),
		"GO":	ValueOf(token.GO),
		"GOTO":	ValueOf(token.GOTO),
		"GTR":	ValueOf(token.GTR),
		"HighestPrec":	ValueOf(token.HighestPrec),
		"IDENT":	ValueOf(token.IDENT),
		"IF":	ValueOf(token.IF),
		"ILLEGAL":	ValueOf(token.ILLEGAL),
		"IMAG":	ValueOf(token.IMAG),
		"IMPORT":	ValueOf(token.IMPORT),
		"INC":	ValueOf(token.INC),
		"INT":	ValueOf(token.INT),
		"INTERFACE":	ValueOf(token.INTERFACE),
		"LAND":	ValueOf(token.LAND),
		"LBRACE":	ValueOf(token.LBRACE),
		"LBRACK":	ValueOf(token.LBRACK),
		"LEQ":	ValueOf(token.LEQ),
		"LOR":	ValueOf(token.LOR),
		"LPAREN":	ValueOf(token.LPAREN),
		"LSS":	ValueOf(token.LSS),
		"Lookup":	ValueOf(token.Lookup),
		"LowestPrec":	ValueOf(token.LowestPrec),
		"MAP":	ValueOf(token.MAP),
		"MUL":	ValueOf(token.MUL),
		"MUL_ASSIGN":	ValueOf(token.MUL_ASSIGN),
		"NEQ":	ValueOf(token.NEQ),
		"NOT":	ValueOf(token.NOT),
		"NewFileSet":	ValueOf(token.NewFileSet),
		"NoPos":	ValueOf(token.NoPos),
		"OR":	ValueOf(token.OR),
		"OR_ASSIGN":	ValueOf(token.OR_ASSIGN),
		"PACKAGE":	ValueOf(token.PACKAGE),
		"PERIOD":	ValueOf(token.PERIOD),
		"QUO":	ValueOf(token.QUO),
		"QUO_ASSIGN":	ValueOf(token.QUO_ASSIGN),
		"RANGE":	ValueOf(token.RANGE),
		"RBRACE":	ValueOf(token.RBRACE),
		"RBRACK":	ValueOf(token.RBRACK),
		"REM":	ValueOf(token.REM),
		"REM_ASSIGN":	ValueOf(token.REM_ASSIGN),
		"RETURN":	ValueOf(token.RETURN),
		"RPAREN":	ValueOf(token.RPAREN),
		"SELECT":	ValueOf(token.SELECT),
		"SEMICOLON":	ValueOf(token.SEMICOLON),
		"SHL":	ValueOf(token.SHL),
		"SHL_ASSIGN":	ValueOf(token.SHL_ASSIGN),
		"SHR":	ValueOf(token.SHR),
		"SHR_ASSIGN":	ValueOf(token.SHR_ASSIGN),
		"STRING":	ValueOf(token.STRING),
		"STRUCT":	ValueOf(token.STRUCT),
		"SUB":	ValueOf(token.SUB),
		"SUB_ASSIGN":	ValueOf(token.SUB_ASSIGN),
		"SWITCH":	ValueOf(token.SWITCH),
		"TYPE":	ValueOf(token.TYPE),
		"UnaryPrec":	ValueOf(token.UnaryPrec),
		"VAR":	ValueOf(token.VAR),
		"XOR":	ValueOf(token.XOR),
		"XOR_ASSIGN":	ValueOf(token.XOR_ASSIGN),
	}, Types: map[string]Type{
		"File":	TypeOf((*token.File)(nil)).Elem(),
		"FileSet":	TypeOf((*token.FileSet)(nil)).Elem(),
		"Pos":	TypeOf((*token.Pos)(nil)).Elem(),
		"Position":	TypeOf((*token.Position)(nil)).Elem(),
		"Token":	TypeOf((*token.Token)(nil)).Elem(),
	}, Untypeds: map[string]string{
		"HighestPrec":	"int:7",
		"LowestPrec":	"int:0",
		"UnaryPrec":	"int:6",
	}, 
	}
}
