// this file was generated by gomacro command: import _b "math/big"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"math/big"
)

// reflection: allow interpreted code to import "math/big"
func init() {
	Packages["math/big"] = Package{
	Binds: map[string]Value{
		"Above":	ValueOf(big.Above),
		"AwayFromZero":	ValueOf(big.AwayFromZero),
		"Below":	ValueOf(big.Below),
		"Exact":	ValueOf(big.Exact),
		"Jacobi":	ValueOf(big.Jacobi),
		"MaxBase":	ValueOf(big.MaxBase),
		"MaxExp":	ValueOf(big.MaxExp),
		"MaxPrec":	ValueOf(uint32(big.MaxPrec)),
		"MinExp":	ValueOf(big.MinExp),
		"NewFloat":	ValueOf(big.NewFloat),
		"NewInt":	ValueOf(big.NewInt),
		"NewRat":	ValueOf(big.NewRat),
		"ParseFloat":	ValueOf(big.ParseFloat),
		"ToNearestAway":	ValueOf(big.ToNearestAway),
		"ToNearestEven":	ValueOf(big.ToNearestEven),
		"ToNegativeInf":	ValueOf(big.ToNegativeInf),
		"ToPositiveInf":	ValueOf(big.ToPositiveInf),
		"ToZero":	ValueOf(big.ToZero),
	}, Types: map[string]Type{
		"Accuracy":	TypeOf((*big.Accuracy)(nil)).Elem(),
		"ErrNaN":	TypeOf((*big.ErrNaN)(nil)).Elem(),
		"Float":	TypeOf((*big.Float)(nil)).Elem(),
		"Int":	TypeOf((*big.Int)(nil)).Elem(),
		"Rat":	TypeOf((*big.Rat)(nil)).Elem(),
		"RoundingMode":	TypeOf((*big.RoundingMode)(nil)).Elem(),
		"Word":	TypeOf((*big.Word)(nil)).Elem(),
	}, Untypeds: map[string]string{
		"MaxBase":	"rune:36",
		"MaxExp":	"int:2147483647",
		"MaxPrec":	"int:4294967295",
		"MinExp":	"int:-2147483648",
	}, 
	}
}
