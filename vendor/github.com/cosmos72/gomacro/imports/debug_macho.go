// this file was generated by gomacro command: import _b "debug/macho"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"debug/macho"
)

// reflection: allow interpreted code to import "debug/macho"
func init() {
	Packages["debug/macho"] = Package{
	Binds: map[string]Value{
		"Cpu386":	ValueOf(macho.Cpu386),
		"CpuAmd64":	ValueOf(macho.CpuAmd64),
		"CpuArm":	ValueOf(macho.CpuArm),
		"CpuPpc":	ValueOf(macho.CpuPpc),
		"CpuPpc64":	ValueOf(macho.CpuPpc64),
		"ErrNotFat":	ValueOf(&macho.ErrNotFat).Elem(),
		"LoadCmdDylib":	ValueOf(macho.LoadCmdDylib),
		"LoadCmdDylinker":	ValueOf(macho.LoadCmdDylinker),
		"LoadCmdDysymtab":	ValueOf(macho.LoadCmdDysymtab),
		"LoadCmdSegment":	ValueOf(macho.LoadCmdSegment),
		"LoadCmdSegment64":	ValueOf(macho.LoadCmdSegment64),
		"LoadCmdSymtab":	ValueOf(macho.LoadCmdSymtab),
		"LoadCmdThread":	ValueOf(macho.LoadCmdThread),
		"LoadCmdUnixThread":	ValueOf(macho.LoadCmdUnixThread),
		"Magic32":	ValueOf(macho.Magic32),
		"Magic64":	ValueOf(macho.Magic64),
		"MagicFat":	ValueOf(macho.MagicFat),
		"NewFatFile":	ValueOf(macho.NewFatFile),
		"NewFile":	ValueOf(macho.NewFile),
		"Open":	ValueOf(macho.Open),
		"OpenFat":	ValueOf(macho.OpenFat),
		"TypeBundle":	ValueOf(macho.TypeBundle),
		"TypeDylib":	ValueOf(macho.TypeDylib),
		"TypeExec":	ValueOf(macho.TypeExec),
		"TypeObj":	ValueOf(macho.TypeObj),
	}, Types: map[string]Type{
		"Cpu":	TypeOf((*macho.Cpu)(nil)).Elem(),
		"Dylib":	TypeOf((*macho.Dylib)(nil)).Elem(),
		"DylibCmd":	TypeOf((*macho.DylibCmd)(nil)).Elem(),
		"Dysymtab":	TypeOf((*macho.Dysymtab)(nil)).Elem(),
		"DysymtabCmd":	TypeOf((*macho.DysymtabCmd)(nil)).Elem(),
		"FatArch":	TypeOf((*macho.FatArch)(nil)).Elem(),
		"FatArchHeader":	TypeOf((*macho.FatArchHeader)(nil)).Elem(),
		"FatFile":	TypeOf((*macho.FatFile)(nil)).Elem(),
		"File":	TypeOf((*macho.File)(nil)).Elem(),
		"FileHeader":	TypeOf((*macho.FileHeader)(nil)).Elem(),
		"FormatError":	TypeOf((*macho.FormatError)(nil)).Elem(),
		"Load":	TypeOf((*macho.Load)(nil)).Elem(),
		"LoadBytes":	TypeOf((*macho.LoadBytes)(nil)).Elem(),
		"LoadCmd":	TypeOf((*macho.LoadCmd)(nil)).Elem(),
		"Nlist32":	TypeOf((*macho.Nlist32)(nil)).Elem(),
		"Nlist64":	TypeOf((*macho.Nlist64)(nil)).Elem(),
		"Regs386":	TypeOf((*macho.Regs386)(nil)).Elem(),
		"RegsAMD64":	TypeOf((*macho.RegsAMD64)(nil)).Elem(),
		"Section":	TypeOf((*macho.Section)(nil)).Elem(),
		"Section32":	TypeOf((*macho.Section32)(nil)).Elem(),
		"Section64":	TypeOf((*macho.Section64)(nil)).Elem(),
		"SectionHeader":	TypeOf((*macho.SectionHeader)(nil)).Elem(),
		"Segment":	TypeOf((*macho.Segment)(nil)).Elem(),
		"Segment32":	TypeOf((*macho.Segment32)(nil)).Elem(),
		"Segment64":	TypeOf((*macho.Segment64)(nil)).Elem(),
		"SegmentHeader":	TypeOf((*macho.SegmentHeader)(nil)).Elem(),
		"Symbol":	TypeOf((*macho.Symbol)(nil)).Elem(),
		"Symtab":	TypeOf((*macho.Symtab)(nil)).Elem(),
		"SymtabCmd":	TypeOf((*macho.SymtabCmd)(nil)).Elem(),
		"Thread":	TypeOf((*macho.Thread)(nil)).Elem(),
		"Type":	TypeOf((*macho.Type)(nil)).Elem(),
	}, Proxies: map[string]Type{
		"Load":	TypeOf((*P_debug_macho_Load)(nil)).Elem(),
	}, Wrappers: map[string][]string{
		"Dylib":	[]string{"Raw",},
		"Dysymtab":	[]string{"Raw",},
		"FatArch":	[]string{"Close","DWARF","ImportedLibraries","ImportedSymbols","Section","Segment",},
		"Segment":	[]string{"Raw",},
		"Symtab":	[]string{"Raw",},
	}, 
	}
}

// --------------- proxy for debug/macho.Load ---------------
type P_debug_macho_Load struct {
	Object	interface{}
	Raw_	func(interface{}) []byte
}
func (P *P_debug_macho_Load) Raw() []byte {
	return P.Raw_(P.Object)
}
