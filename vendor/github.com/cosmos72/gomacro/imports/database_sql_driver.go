// this file was generated by gomacro command: import _b "database/sql/driver"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"context"
	"database/sql/driver"
	"reflect"
)

// reflection: allow interpreted code to import "database/sql/driver"
func init() {
	Packages["database/sql/driver"] = Package{
	Binds: map[string]Value{
		"Bool":	ValueOf(&driver.Bool).Elem(),
		"DefaultParameterConverter":	ValueOf(&driver.DefaultParameterConverter).Elem(),
		"ErrBadConn":	ValueOf(&driver.ErrBadConn).Elem(),
		"ErrRemoveArgument":	ValueOf(&driver.ErrRemoveArgument).Elem(),
		"ErrSkip":	ValueOf(&driver.ErrSkip).Elem(),
		"Int32":	ValueOf(&driver.Int32).Elem(),
		"IsScanValue":	ValueOf(driver.IsScanValue),
		"IsValue":	ValueOf(driver.IsValue),
		"ResultNoRows":	ValueOf(&driver.ResultNoRows).Elem(),
		"String":	ValueOf(&driver.String).Elem(),
	}, Types: map[string]Type{
		"ColumnConverter":	TypeOf((*driver.ColumnConverter)(nil)).Elem(),
		"Conn":	TypeOf((*driver.Conn)(nil)).Elem(),
		"ConnBeginTx":	TypeOf((*driver.ConnBeginTx)(nil)).Elem(),
		"ConnPrepareContext":	TypeOf((*driver.ConnPrepareContext)(nil)).Elem(),
		"Driver":	TypeOf((*driver.Driver)(nil)).Elem(),
		"Execer":	TypeOf((*driver.Execer)(nil)).Elem(),
		"ExecerContext":	TypeOf((*driver.ExecerContext)(nil)).Elem(),
		"IsolationLevel":	TypeOf((*driver.IsolationLevel)(nil)).Elem(),
		"NamedValue":	TypeOf((*driver.NamedValue)(nil)).Elem(),
		"NamedValueChecker":	TypeOf((*driver.NamedValueChecker)(nil)).Elem(),
		"NotNull":	TypeOf((*driver.NotNull)(nil)).Elem(),
		"Null":	TypeOf((*driver.Null)(nil)).Elem(),
		"Pinger":	TypeOf((*driver.Pinger)(nil)).Elem(),
		"Queryer":	TypeOf((*driver.Queryer)(nil)).Elem(),
		"QueryerContext":	TypeOf((*driver.QueryerContext)(nil)).Elem(),
		"Result":	TypeOf((*driver.Result)(nil)).Elem(),
		"Rows":	TypeOf((*driver.Rows)(nil)).Elem(),
		"RowsAffected":	TypeOf((*driver.RowsAffected)(nil)).Elem(),
		"RowsColumnTypeDatabaseTypeName":	TypeOf((*driver.RowsColumnTypeDatabaseTypeName)(nil)).Elem(),
		"RowsColumnTypeLength":	TypeOf((*driver.RowsColumnTypeLength)(nil)).Elem(),
		"RowsColumnTypeNullable":	TypeOf((*driver.RowsColumnTypeNullable)(nil)).Elem(),
		"RowsColumnTypePrecisionScale":	TypeOf((*driver.RowsColumnTypePrecisionScale)(nil)).Elem(),
		"RowsColumnTypeScanType":	TypeOf((*driver.RowsColumnTypeScanType)(nil)).Elem(),
		"RowsNextResultSet":	TypeOf((*driver.RowsNextResultSet)(nil)).Elem(),
		"Stmt":	TypeOf((*driver.Stmt)(nil)).Elem(),
		"StmtExecContext":	TypeOf((*driver.StmtExecContext)(nil)).Elem(),
		"StmtQueryContext":	TypeOf((*driver.StmtQueryContext)(nil)).Elem(),
		"Tx":	TypeOf((*driver.Tx)(nil)).Elem(),
		"TxOptions":	TypeOf((*driver.TxOptions)(nil)).Elem(),
		"Value":	TypeOf((*driver.Value)(nil)).Elem(),
		"ValueConverter":	TypeOf((*driver.ValueConverter)(nil)).Elem(),
		"Valuer":	TypeOf((*driver.Valuer)(nil)).Elem(),
	}, Proxies: map[string]Type{
		"ColumnConverter":	TypeOf((*P_database_sql_driver_ColumnConverter)(nil)).Elem(),
		"Conn":	TypeOf((*P_database_sql_driver_Conn)(nil)).Elem(),
		"ConnBeginTx":	TypeOf((*P_database_sql_driver_ConnBeginTx)(nil)).Elem(),
		"ConnPrepareContext":	TypeOf((*P_database_sql_driver_ConnPrepareContext)(nil)).Elem(),
		"Driver":	TypeOf((*P_database_sql_driver_Driver)(nil)).Elem(),
		"Execer":	TypeOf((*P_database_sql_driver_Execer)(nil)).Elem(),
		"ExecerContext":	TypeOf((*P_database_sql_driver_ExecerContext)(nil)).Elem(),
		"NamedValueChecker":	TypeOf((*P_database_sql_driver_NamedValueChecker)(nil)).Elem(),
		"Pinger":	TypeOf((*P_database_sql_driver_Pinger)(nil)).Elem(),
		"Queryer":	TypeOf((*P_database_sql_driver_Queryer)(nil)).Elem(),
		"QueryerContext":	TypeOf((*P_database_sql_driver_QueryerContext)(nil)).Elem(),
		"Result":	TypeOf((*P_database_sql_driver_Result)(nil)).Elem(),
		"Rows":	TypeOf((*P_database_sql_driver_Rows)(nil)).Elem(),
		"RowsColumnTypeDatabaseTypeName":	TypeOf((*P_database_sql_driver_RowsColumnTypeDatabaseTypeName)(nil)).Elem(),
		"RowsColumnTypeLength":	TypeOf((*P_database_sql_driver_RowsColumnTypeLength)(nil)).Elem(),
		"RowsColumnTypeNullable":	TypeOf((*P_database_sql_driver_RowsColumnTypeNullable)(nil)).Elem(),
		"RowsColumnTypePrecisionScale":	TypeOf((*P_database_sql_driver_RowsColumnTypePrecisionScale)(nil)).Elem(),
		"RowsColumnTypeScanType":	TypeOf((*P_database_sql_driver_RowsColumnTypeScanType)(nil)).Elem(),
		"RowsNextResultSet":	TypeOf((*P_database_sql_driver_RowsNextResultSet)(nil)).Elem(),
		"Stmt":	TypeOf((*P_database_sql_driver_Stmt)(nil)).Elem(),
		"StmtExecContext":	TypeOf((*P_database_sql_driver_StmtExecContext)(nil)).Elem(),
		"StmtQueryContext":	TypeOf((*P_database_sql_driver_StmtQueryContext)(nil)).Elem(),
		"Tx":	TypeOf((*P_database_sql_driver_Tx)(nil)).Elem(),
		"ValueConverter":	TypeOf((*P_database_sql_driver_ValueConverter)(nil)).Elem(),
		"Valuer":	TypeOf((*P_database_sql_driver_Valuer)(nil)).Elem(),
	}, 
	}
}

// --------------- proxy for database/sql/driver.ColumnConverter ---------------
type P_database_sql_driver_ColumnConverter struct {
	Object	interface{}
	ColumnConverter_	func(_proxy_obj_ interface{}, idx int) driver.ValueConverter
}
func (P *P_database_sql_driver_ColumnConverter) ColumnConverter(idx int) driver.ValueConverter {
	return P.ColumnConverter_(P.Object, idx)
}

// --------------- proxy for database/sql/driver.Conn ---------------
type P_database_sql_driver_Conn struct {
	Object	interface{}
	Begin_	func(interface{}) (driver.Tx, error)
	Close_	func(interface{}) error
	Prepare_	func(_proxy_obj_ interface{}, query string) (driver.Stmt, error)
}
func (P *P_database_sql_driver_Conn) Begin() (driver.Tx, error) {
	return P.Begin_(P.Object)
}
func (P *P_database_sql_driver_Conn) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_Conn) Prepare(query string) (driver.Stmt, error) {
	return P.Prepare_(P.Object, query)
}

// --------------- proxy for database/sql/driver.ConnBeginTx ---------------
type P_database_sql_driver_ConnBeginTx struct {
	Object	interface{}
	BeginTx_	func(_proxy_obj_ interface{}, ctx context.Context, opts driver.TxOptions) (driver.Tx, error)
}
func (P *P_database_sql_driver_ConnBeginTx) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	return P.BeginTx_(P.Object, ctx, opts)
}

// --------------- proxy for database/sql/driver.ConnPrepareContext ---------------
type P_database_sql_driver_ConnPrepareContext struct {
	Object	interface{}
	PrepareContext_	func(_proxy_obj_ interface{}, ctx context.Context, query string) (driver.Stmt, error)
}
func (P *P_database_sql_driver_ConnPrepareContext) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	return P.PrepareContext_(P.Object, ctx, query)
}

// --------------- proxy for database/sql/driver.Driver ---------------
type P_database_sql_driver_Driver struct {
	Object	interface{}
	Open_	func(_proxy_obj_ interface{}, name string) (driver.Conn, error)
}
func (P *P_database_sql_driver_Driver) Open(name string) (driver.Conn, error) {
	return P.Open_(P.Object, name)
}

// --------------- proxy for database/sql/driver.Execer ---------------
type P_database_sql_driver_Execer struct {
	Object	interface{}
	Exec_	func(_proxy_obj_ interface{}, query string, args []driver.Value) (driver.Result, error)
}
func (P *P_database_sql_driver_Execer) Exec(query string, args []driver.Value) (driver.Result, error) {
	return P.Exec_(P.Object, query, args)
}

// --------------- proxy for database/sql/driver.ExecerContext ---------------
type P_database_sql_driver_ExecerContext struct {
	Object	interface{}
	ExecContext_	func(_proxy_obj_ interface{}, ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error)
}
func (P *P_database_sql_driver_ExecerContext) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	return P.ExecContext_(P.Object, ctx, query, args)
}

// --------------- proxy for database/sql/driver.NamedValueChecker ---------------
type P_database_sql_driver_NamedValueChecker struct {
	Object	interface{}
	CheckNamedValue_	func(interface{}, *driver.NamedValue) error
}
func (P *P_database_sql_driver_NamedValueChecker) CheckNamedValue(unnamed0 *driver.NamedValue) error {
	return P.CheckNamedValue_(P.Object, unnamed0)
}

// --------------- proxy for database/sql/driver.Pinger ---------------
type P_database_sql_driver_Pinger struct {
	Object	interface{}
	Ping_	func(_proxy_obj_ interface{}, ctx context.Context) error
}
func (P *P_database_sql_driver_Pinger) Ping(ctx context.Context) error {
	return P.Ping_(P.Object, ctx)
}

// --------------- proxy for database/sql/driver.Queryer ---------------
type P_database_sql_driver_Queryer struct {
	Object	interface{}
	Query_	func(_proxy_obj_ interface{}, query string, args []driver.Value) (driver.Rows, error)
}
func (P *P_database_sql_driver_Queryer) Query(query string, args []driver.Value) (driver.Rows, error) {
	return P.Query_(P.Object, query, args)
}

// --------------- proxy for database/sql/driver.QueryerContext ---------------
type P_database_sql_driver_QueryerContext struct {
	Object	interface{}
	QueryContext_	func(_proxy_obj_ interface{}, ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error)
}
func (P *P_database_sql_driver_QueryerContext) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	return P.QueryContext_(P.Object, ctx, query, args)
}

// --------------- proxy for database/sql/driver.Result ---------------
type P_database_sql_driver_Result struct {
	Object	interface{}
	LastInsertId_	func(interface{}) (int64, error)
	RowsAffected_	func(interface{}) (int64, error)
}
func (P *P_database_sql_driver_Result) LastInsertId() (int64, error) {
	return P.LastInsertId_(P.Object)
}
func (P *P_database_sql_driver_Result) RowsAffected() (int64, error) {
	return P.RowsAffected_(P.Object)
}

// --------------- proxy for database/sql/driver.Rows ---------------
type P_database_sql_driver_Rows struct {
	Object	interface{}
	Close_	func(interface{}) error
	Columns_	func(interface{}) []string
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
}
func (P *P_database_sql_driver_Rows) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_Rows) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_Rows) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}

// --------------- proxy for database/sql/driver.RowsColumnTypeDatabaseTypeName ---------------
type P_database_sql_driver_RowsColumnTypeDatabaseTypeName struct {
	Object	interface{}
	Close_	func(interface{}) error
	ColumnTypeDatabaseTypeName_	func(_proxy_obj_ interface{}, index int) string
	Columns_	func(interface{}) []string
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
}
func (P *P_database_sql_driver_RowsColumnTypeDatabaseTypeName) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeDatabaseTypeName) ColumnTypeDatabaseTypeName(index int) string {
	return P.ColumnTypeDatabaseTypeName_(P.Object, index)
}
func (P *P_database_sql_driver_RowsColumnTypeDatabaseTypeName) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeDatabaseTypeName) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}

// --------------- proxy for database/sql/driver.RowsColumnTypeLength ---------------
type P_database_sql_driver_RowsColumnTypeLength struct {
	Object	interface{}
	Close_	func(interface{}) error
	ColumnTypeLength_	func(_proxy_obj_ interface{}, index int) (length int64, ok bool)
	Columns_	func(interface{}) []string
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
}
func (P *P_database_sql_driver_RowsColumnTypeLength) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeLength) ColumnTypeLength(index int) (length int64, ok bool) {
	return P.ColumnTypeLength_(P.Object, index)
}
func (P *P_database_sql_driver_RowsColumnTypeLength) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeLength) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}

// --------------- proxy for database/sql/driver.RowsColumnTypeNullable ---------------
type P_database_sql_driver_RowsColumnTypeNullable struct {
	Object	interface{}
	Close_	func(interface{}) error
	ColumnTypeNullable_	func(_proxy_obj_ interface{}, index int) (nullable bool, ok bool)
	Columns_	func(interface{}) []string
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
}
func (P *P_database_sql_driver_RowsColumnTypeNullable) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeNullable) ColumnTypeNullable(index int) (nullable bool, ok bool) {
	return P.ColumnTypeNullable_(P.Object, index)
}
func (P *P_database_sql_driver_RowsColumnTypeNullable) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeNullable) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}

// --------------- proxy for database/sql/driver.RowsColumnTypePrecisionScale ---------------
type P_database_sql_driver_RowsColumnTypePrecisionScale struct {
	Object	interface{}
	Close_	func(interface{}) error
	ColumnTypePrecisionScale_	func(_proxy_obj_ interface{}, index int) (precision int64, scale int64, ok bool)
	Columns_	func(interface{}) []string
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
}
func (P *P_database_sql_driver_RowsColumnTypePrecisionScale) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypePrecisionScale) ColumnTypePrecisionScale(index int) (precision int64, scale int64, ok bool) {
	return P.ColumnTypePrecisionScale_(P.Object, index)
}
func (P *P_database_sql_driver_RowsColumnTypePrecisionScale) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypePrecisionScale) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}

// --------------- proxy for database/sql/driver.RowsColumnTypeScanType ---------------
type P_database_sql_driver_RowsColumnTypeScanType struct {
	Object	interface{}
	Close_	func(interface{}) error
	ColumnTypeScanType_	func(_proxy_obj_ interface{}, index int) reflect.Type
	Columns_	func(interface{}) []string
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
}
func (P *P_database_sql_driver_RowsColumnTypeScanType) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeScanType) ColumnTypeScanType(index int) reflect.Type {
	return P.ColumnTypeScanType_(P.Object, index)
}
func (P *P_database_sql_driver_RowsColumnTypeScanType) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_RowsColumnTypeScanType) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}

// --------------- proxy for database/sql/driver.RowsNextResultSet ---------------
type P_database_sql_driver_RowsNextResultSet struct {
	Object	interface{}
	Close_	func(interface{}) error
	Columns_	func(interface{}) []string
	HasNextResultSet_	func(interface{}) bool
	Next_	func(_proxy_obj_ interface{}, dest []driver.Value) error
	NextResultSet_	func(interface{}) error
}
func (P *P_database_sql_driver_RowsNextResultSet) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_RowsNextResultSet) Columns() []string {
	return P.Columns_(P.Object)
}
func (P *P_database_sql_driver_RowsNextResultSet) HasNextResultSet() bool {
	return P.HasNextResultSet_(P.Object)
}
func (P *P_database_sql_driver_RowsNextResultSet) Next(dest []driver.Value) error {
	return P.Next_(P.Object, dest)
}
func (P *P_database_sql_driver_RowsNextResultSet) NextResultSet() error {
	return P.NextResultSet_(P.Object)
}

// --------------- proxy for database/sql/driver.Stmt ---------------
type P_database_sql_driver_Stmt struct {
	Object	interface{}
	Close_	func(interface{}) error
	Exec_	func(_proxy_obj_ interface{}, args []driver.Value) (driver.Result, error)
	NumInput_	func(interface{}) int
	Query_	func(_proxy_obj_ interface{}, args []driver.Value) (driver.Rows, error)
}
func (P *P_database_sql_driver_Stmt) Close() error {
	return P.Close_(P.Object)
}
func (P *P_database_sql_driver_Stmt) Exec(args []driver.Value) (driver.Result, error) {
	return P.Exec_(P.Object, args)
}
func (P *P_database_sql_driver_Stmt) NumInput() int {
	return P.NumInput_(P.Object)
}
func (P *P_database_sql_driver_Stmt) Query(args []driver.Value) (driver.Rows, error) {
	return P.Query_(P.Object, args)
}

// --------------- proxy for database/sql/driver.StmtExecContext ---------------
type P_database_sql_driver_StmtExecContext struct {
	Object	interface{}
	ExecContext_	func(_proxy_obj_ interface{}, ctx context.Context, args []driver.NamedValue) (driver.Result, error)
}
func (P *P_database_sql_driver_StmtExecContext) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	return P.ExecContext_(P.Object, ctx, args)
}

// --------------- proxy for database/sql/driver.StmtQueryContext ---------------
type P_database_sql_driver_StmtQueryContext struct {
	Object	interface{}
	QueryContext_	func(_proxy_obj_ interface{}, ctx context.Context, args []driver.NamedValue) (driver.Rows, error)
}
func (P *P_database_sql_driver_StmtQueryContext) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	return P.QueryContext_(P.Object, ctx, args)
}

// --------------- proxy for database/sql/driver.Tx ---------------
type P_database_sql_driver_Tx struct {
	Object	interface{}
	Commit_	func(interface{}) error
	Rollback_	func(interface{}) error
}
func (P *P_database_sql_driver_Tx) Commit() error {
	return P.Commit_(P.Object)
}
func (P *P_database_sql_driver_Tx) Rollback() error {
	return P.Rollback_(P.Object)
}

// --------------- proxy for database/sql/driver.ValueConverter ---------------
type P_database_sql_driver_ValueConverter struct {
	Object	interface{}
	ConvertValue_	func(_proxy_obj_ interface{}, v interface{}) (driver.Value, error)
}
func (P *P_database_sql_driver_ValueConverter) ConvertValue(v interface{}) (driver.Value, error) {
	return P.ConvertValue_(P.Object, v)
}

// --------------- proxy for database/sql/driver.Valuer ---------------
type P_database_sql_driver_Valuer struct {
	Object	interface{}
	Value_	func(interface{}) (driver.Value, error)
}
func (P *P_database_sql_driver_Valuer) Value() (driver.Value, error) {
	return P.Value_(P.Object)
}
