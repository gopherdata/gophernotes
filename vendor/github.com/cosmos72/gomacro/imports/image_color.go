// this file was generated by gomacro command: import _b "image/color"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"image/color"
)

// reflection: allow interpreted code to import "image/color"
func init() {
	Packages["image/color"] = Package{
	Binds: map[string]Value{
		"Alpha16Model":	ValueOf(&color.Alpha16Model).Elem(),
		"AlphaModel":	ValueOf(&color.AlphaModel).Elem(),
		"Black":	ValueOf(&color.Black).Elem(),
		"CMYKModel":	ValueOf(&color.CMYKModel).Elem(),
		"CMYKToRGB":	ValueOf(color.CMYKToRGB),
		"Gray16Model":	ValueOf(&color.Gray16Model).Elem(),
		"GrayModel":	ValueOf(&color.GrayModel).Elem(),
		"ModelFunc":	ValueOf(color.ModelFunc),
		"NRGBA64Model":	ValueOf(&color.NRGBA64Model).Elem(),
		"NRGBAModel":	ValueOf(&color.NRGBAModel).Elem(),
		"NYCbCrAModel":	ValueOf(&color.NYCbCrAModel).Elem(),
		"Opaque":	ValueOf(&color.Opaque).Elem(),
		"RGBA64Model":	ValueOf(&color.RGBA64Model).Elem(),
		"RGBAModel":	ValueOf(&color.RGBAModel).Elem(),
		"RGBToCMYK":	ValueOf(color.RGBToCMYK),
		"RGBToYCbCr":	ValueOf(color.RGBToYCbCr),
		"Transparent":	ValueOf(&color.Transparent).Elem(),
		"White":	ValueOf(&color.White).Elem(),
		"YCbCrModel":	ValueOf(&color.YCbCrModel).Elem(),
		"YCbCrToRGB":	ValueOf(color.YCbCrToRGB),
	}, Types: map[string]Type{
		"Alpha":	TypeOf((*color.Alpha)(nil)).Elem(),
		"Alpha16":	TypeOf((*color.Alpha16)(nil)).Elem(),
		"CMYK":	TypeOf((*color.CMYK)(nil)).Elem(),
		"Color":	TypeOf((*color.Color)(nil)).Elem(),
		"Gray":	TypeOf((*color.Gray)(nil)).Elem(),
		"Gray16":	TypeOf((*color.Gray16)(nil)).Elem(),
		"Model":	TypeOf((*color.Model)(nil)).Elem(),
		"NRGBA":	TypeOf((*color.NRGBA)(nil)).Elem(),
		"NRGBA64":	TypeOf((*color.NRGBA64)(nil)).Elem(),
		"NYCbCrA":	TypeOf((*color.NYCbCrA)(nil)).Elem(),
		"Palette":	TypeOf((*color.Palette)(nil)).Elem(),
		"RGBA":	TypeOf((*color.RGBA)(nil)).Elem(),
		"RGBA64":	TypeOf((*color.RGBA64)(nil)).Elem(),
		"YCbCr":	TypeOf((*color.YCbCr)(nil)).Elem(),
	}, Proxies: map[string]Type{
		"Color":	TypeOf((*P_image_color_Color)(nil)).Elem(),
		"Model":	TypeOf((*P_image_color_Model)(nil)).Elem(),
	}, 
	}
}

// --------------- proxy for image/color.Color ---------------
type P_image_color_Color struct {
	Object	interface{}
	RGBA_	func(interface{}) (r uint32, g uint32, b uint32, a uint32)
}
func (P *P_image_color_Color) RGBA() (r uint32, g uint32, b uint32, a uint32) {
	return P.RGBA_(P.Object)
}

// --------------- proxy for image/color.Model ---------------
type P_image_color_Model struct {
	Object	interface{}
	Convert_	func(_proxy_obj_ interface{}, c color.Color) color.Color
}
func (P *P_image_color_Model) Convert(c color.Color) color.Color {
	return P.Convert_(P.Object, c)
}
