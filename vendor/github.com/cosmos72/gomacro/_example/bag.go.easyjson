// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9d2dde3aDecodeGithubComCosmos72GomacroExamples(in *jlexer.Lexer, out *Box) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "B":
			if in.IsNull() {
				in.Skip()
				out.B = nil
			} else {
				in.Delim('[')
				if out.B == nil {
					if !in.IsDelim(']') {
						out.B = make([]bool, 0, 64)
					} else {
						out.B = []bool{}
					}
				} else {
					out.B = (out.B)[:0]
				}
				for !in.IsDelim(']') {
					var v1 bool
					v1 = bool(in.Bool())
					out.B = append(out.B, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "I":
			if in.IsNull() {
				in.Skip()
				out.I = nil
			} else {
				in.Delim('[')
				if out.I == nil {
					if !in.IsDelim(']') {
						out.I = make([]int, 0, 8)
					} else {
						out.I = []int{}
					}
				} else {
					out.I = (out.I)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.I = append(out.I, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "I8":
			if in.IsNull() {
				in.Skip()
				out.I8 = nil
			} else {
				in.Delim('[')
				if out.I8 == nil {
					if !in.IsDelim(']') {
						out.I8 = make([]int8, 0, 64)
					} else {
						out.I8 = []int8{}
					}
				} else {
					out.I8 = (out.I8)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int8
					v3 = int8(in.Int8())
					out.I8 = append(out.I8, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "I16":
			if in.IsNull() {
				in.Skip()
				out.I16 = nil
			} else {
				in.Delim('[')
				if out.I16 == nil {
					if !in.IsDelim(']') {
						out.I16 = make([]int16, 0, 32)
					} else {
						out.I16 = []int16{}
					}
				} else {
					out.I16 = (out.I16)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int16
					v4 = int16(in.Int16())
					out.I16 = append(out.I16, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "I32":
			if in.IsNull() {
				in.Skip()
				out.I32 = nil
			} else {
				in.Delim('[')
				if out.I32 == nil {
					if !in.IsDelim(']') {
						out.I32 = make([]int32, 0, 16)
					} else {
						out.I32 = []int32{}
					}
				} else {
					out.I32 = (out.I32)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int32
					v5 = int32(in.Int32())
					out.I32 = append(out.I32, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "I64":
			if in.IsNull() {
				in.Skip()
				out.I64 = nil
			} else {
				in.Delim('[')
				if out.I64 == nil {
					if !in.IsDelim(']') {
						out.I64 = make([]int64, 0, 8)
					} else {
						out.I64 = []int64{}
					}
				} else {
					out.I64 = (out.I64)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int64
					v6 = int64(in.Int64())
					out.I64 = append(out.I64, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "U":
			if in.IsNull() {
				in.Skip()
				out.U = nil
			} else {
				in.Delim('[')
				if out.U == nil {
					if !in.IsDelim(']') {
						out.U = make([]uint, 0, 8)
					} else {
						out.U = []uint{}
					}
				} else {
					out.U = (out.U)[:0]
				}
				for !in.IsDelim(']') {
					var v7 uint
					v7 = uint(in.Uint())
					out.U = append(out.U, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "U8":
			if in.IsNull() {
				in.Skip()
				out.U8 = nil
			} else {
				out.U8 = in.Bytes()
			}
		case "U16":
			if in.IsNull() {
				in.Skip()
				out.U16 = nil
			} else {
				in.Delim('[')
				if out.U16 == nil {
					if !in.IsDelim(']') {
						out.U16 = make([]uint16, 0, 32)
					} else {
						out.U16 = []uint16{}
					}
				} else {
					out.U16 = (out.U16)[:0]
				}
				for !in.IsDelim(']') {
					var v9 uint16
					v9 = uint16(in.Uint16())
					out.U16 = append(out.U16, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "U32":
			if in.IsNull() {
				in.Skip()
				out.U32 = nil
			} else {
				in.Delim('[')
				if out.U32 == nil {
					if !in.IsDelim(']') {
						out.U32 = make([]uint32, 0, 16)
					} else {
						out.U32 = []uint32{}
					}
				} else {
					out.U32 = (out.U32)[:0]
				}
				for !in.IsDelim(']') {
					var v10 uint32
					v10 = uint32(in.Uint32())
					out.U32 = append(out.U32, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "U64":
			if in.IsNull() {
				in.Skip()
				out.U64 = nil
			} else {
				in.Delim('[')
				if out.U64 == nil {
					if !in.IsDelim(']') {
						out.U64 = make([]uint64, 0, 8)
					} else {
						out.U64 = []uint64{}
					}
				} else {
					out.U64 = (out.U64)[:0]
				}
				for !in.IsDelim(']') {
					var v11 uint64
					v11 = uint64(in.Uint64())
					out.U64 = append(out.U64, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "S":
			if in.IsNull() {
				in.Skip()
				out.S = nil
			} else {
				in.Delim('[')
				if out.S == nil {
					if !in.IsDelim(']') {
						out.S = make([]string, 0, 4)
					} else {
						out.S = []string{}
					}
				} else {
					out.S = (out.S)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.S = append(out.S, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Any":
			if in.IsNull() {
				in.Skip()
				out.Any = nil
			} else {
				in.Delim('[')
				if out.Any == nil {
					if !in.IsDelim(']') {
						out.Any = make([]interface{}, 0, 4)
					} else {
						out.Any = []interface{}{}
					}
				} else {
					out.Any = (out.Any)[:0]
				}
				for !in.IsDelim(']') {
					var v13 interface{}
					if m, ok := v13.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v13.(json.Unmarshaler); ok {
						m.UnmarshalJSON(in.Raw())
					} else {
						v13 = in.Interface()
					}
					out.Any = append(out.Any, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Bag":
			if in.IsNull() {
				in.Skip()
				out.Bag = nil
			} else {
				in.Delim('[')
				if out.Bag == nil {
					if !in.IsDelim(']') {
						out.Bag = make([]*Bag, 0, 8)
					} else {
						out.Bag = []*Bag{}
					}
				} else {
					out.Bag = (out.Bag)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *Bag
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(Bag)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.Bag = append(out.Bag, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d2dde3aEncodeGithubComCosmos72GomacroExamples(out *jwriter.Writer, in Box) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"B\":")
	if in.B == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v15, v16 := range in.B {
			if v15 > 0 {
				out.RawByte(',')
			}
			out.Bool(bool(v16))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I\":")
	if in.I == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.I {
			if v17 > 0 {
				out.RawByte(',')
			}
			out.Int(int(v18))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I8\":")
	if in.I8 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v19, v20 := range in.I8 {
			if v19 > 0 {
				out.RawByte(',')
			}
			out.Int8(int8(v20))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I16\":")
	if in.I16 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v21, v22 := range in.I16 {
			if v21 > 0 {
				out.RawByte(',')
			}
			out.Int16(int16(v22))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I32\":")
	if in.I32 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in.I32 {
			if v23 > 0 {
				out.RawByte(',')
			}
			out.Int32(int32(v24))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I64\":")
	if in.I64 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v25, v26 := range in.I64 {
			if v25 > 0 {
				out.RawByte(',')
			}
			out.Int64(int64(v26))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U\":")
	if in.U == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v27, v28 := range in.U {
			if v27 > 0 {
				out.RawByte(',')
			}
			out.Uint(uint(v28))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U8\":")
	out.Base64Bytes(in.U8)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U16\":")
	if in.U16 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v31, v32 := range in.U16 {
			if v31 > 0 {
				out.RawByte(',')
			}
			out.Uint16(uint16(v32))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U32\":")
	if in.U32 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v33, v34 := range in.U32 {
			if v33 > 0 {
				out.RawByte(',')
			}
			out.Uint32(uint32(v34))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U64\":")
	if in.U64 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in.U64 {
			if v35 > 0 {
				out.RawByte(',')
			}
			out.Uint64(uint64(v36))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"S\":")
	if in.S == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v37, v38 := range in.S {
			if v37 > 0 {
				out.RawByte(',')
			}
			out.String(string(v38))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Any\":")
	if in.Any == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v39, v40 := range in.Any {
			if v39 > 0 {
				out.RawByte(',')
			}
			if m, ok := v40.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v40.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v40))
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Bag\":")
	if in.Bag == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v41, v42 := range in.Bag {
			if v41 > 0 {
				out.RawByte(',')
			}
			if v42 == nil {
				out.RawString("null")
			} else {
				(*v42).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Box) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d2dde3aEncodeGithubComCosmos72GomacroExamples(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Box) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d2dde3aEncodeGithubComCosmos72GomacroExamples(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Box) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d2dde3aDecodeGithubComCosmos72GomacroExamples(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Box) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d2dde3aDecodeGithubComCosmos72GomacroExamples(l, v)
}
func easyjson9d2dde3aDecodeGithubComCosmos72GomacroExamples1(in *jlexer.Lexer, out *Bag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "B":
			out.B = bool(in.Bool())
		case "I":
			out.I = int(in.Int())
		case "I8":
			out.I8 = int8(in.Int8())
		case "I16":
			out.I16 = int16(in.Int16())
		case "I32":
			out.I32 = int32(in.Int32())
		case "I64":
			out.I64 = int64(in.Int64())
		case "U":
			out.U = uint(in.Uint())
		case "U8":
			out.U8 = uint8(in.Uint8())
		case "U16":
			out.U16 = uint16(in.Uint16())
		case "U32":
			out.U32 = uint32(in.Uint32())
		case "U64":
			out.U64 = uint64(in.Uint64())
		case "S":
			out.S = string(in.String())
		case "Any":
			if m, ok := out.Any.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Any.(json.Unmarshaler); ok {
				m.UnmarshalJSON(in.Raw())
			} else {
				out.Any = in.Interface()
			}
		case "Box":
			if in.IsNull() {
				in.Skip()
				out.Box = nil
			} else {
				if out.Box == nil {
					out.Box = new(Box)
				}
				(*out.Box).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d2dde3aEncodeGithubComCosmos72GomacroExamples1(out *jwriter.Writer, in Bag) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"B\":")
	out.Bool(bool(in.B))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I\":")
	out.Int(int(in.I))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I8\":")
	out.Int8(int8(in.I8))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I16\":")
	out.Int16(int16(in.I16))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I32\":")
	out.Int32(int32(in.I32))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"I64\":")
	out.Int64(int64(in.I64))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U\":")
	out.Uint(uint(in.U))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U8\":")
	out.Uint8(uint8(in.U8))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U16\":")
	out.Uint16(uint16(in.U16))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U32\":")
	out.Uint32(uint32(in.U32))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"U64\":")
	out.Uint64(uint64(in.U64))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"S\":")
	out.String(string(in.S))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Any\":")
	if m, ok := in.Any.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.Any.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.Any))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Box\":")
	if in.Box == nil {
		out.RawString("null")
	} else {
		(*in.Box).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d2dde3aEncodeGithubComCosmos72GomacroExamples1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d2dde3aEncodeGithubComCosmos72GomacroExamples1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d2dde3aDecodeGithubComCosmos72GomacroExamples1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d2dde3aDecodeGithubComCosmos72GomacroExamples1(l, v)
}
